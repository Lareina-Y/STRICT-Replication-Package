18	NPE DateTimeZoneBuilder DateTimeZone build duplicate named recurring saving time thread warning message generated identifier automatically generated PrecalculatedZone create thread NPE generated ZoneInfoCompiler verbose cVerbose ThreadLocal incorrectly initialized ZoneInfoCompiler java static cVerbose set Boolean FALSE initialize cVerbose thread subsequent NPE caused autoboxing java public static boolean verbose return cVerbose approach remove initialization test null java public static boolean verbose Boolean verbose cVerbose return verbose null verbose false test case java Test public void testDateTimeZoneBuilder throws Exception getTestDataTimeZoneBuilder toDateTimeZone TestDTZ true Thread Thread Runnable Override public void getTestDataTimeZoneBuilder toDateTimeZone TestDTZ true start join private DateTimeZoneBuilder getTestDataTimeZoneBuilder return DateTimeZoneBuilder addCutover false setStandardOffset addRecurringSavings Integer MAX false addRecurringSavings Integer MAX false
21	DateTimeFormat parseInto miscalculates year appears bug http sourceforge net joda time bugs reported code org joda time format TestDateTimeFormatter breaks input mutable time millis mishandled year parse changed java public void testParseInto monthDay feb startOfYear DateTimeFormatter DateTimeFormat forPattern withLocale Locale MutableDateTime result MutableDateTime NEWYORK assertEquals parseInto result assertEquals MutableDateTime NEWYORK result
28	Questionable behaviour GJChronology dates pass expect test pass Chronology chronology GJChronology getInstance LocalDate start LocalDate chronology LocalDate expectedEnd LocalDate chronology assertThat start minusYears equalTo expectedEnd assertThat start Period years equalTo expectedEnd error org joda time IllegalFieldValueException year supported year thought job framework skip existent year return
42	DateTimeZone forOffsetHoursMinutes handle negative offset hour DateTimeZone forOffsetHoursMinutes handle negative offset hour argument range checking forOffsetMillis mentioned documentation negative minutes accepted
43	Ensure max min valid offset DateTimeZone apply max min offset parse method limited maximum
77	addDays MutableDateTime DST transition summer winter time zone adding amount days mutable time object object code java final MutableDateTime mdt MutableDateTime DateTimeZone forID Europe Berlin System println Start mdt mdt toInstant getMillis mdt addHours System println addHours mdt mdt toInstant getMillis mdt addHours System println addHours mdt mdt toInstant getMillis mdt addDays System println addDays mdt mdt toInstant getMillis prints Start addHours addHours change time addDays error time changed hour methods addMonths addYears problem addSeconds addMinutes addHours tested version repeat test Joda invocation addDays change
88	Constructing invalid Partials Partials constructed invoking constructor Partial DateTimeFieldType int merging set partials constructed calling Partial DateTimeFieldType int java Partial Partial DateTimeFieldType year hourOfDay int Partial Partial year hourOfDay assert doesn work cases java Partial DateTimeFieldType clockhourOfDay hourOfDay int throws Types array duplicate Partial clockhourOfDay hourOfDay Partial clockhourOfDay hourOfDay suppose Partials constructed case issue stems fact Partial invalid java Partial clockhourOfDay hourOfDay isEqual Partial hourOfDay clockhourOfDay throws objects matching field types
