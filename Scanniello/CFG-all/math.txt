M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (I)java.util.List:size()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:retrieveLineSegments() (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.VectorFormat:<init>() (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getAngle() (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (S)org.apache.commons.math3.util.MathUtils:checkNotNull(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:multiply(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (I)org.apache.commons.math3.geometry.partitioning.Region:getSize()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.partitioning.BSPTree:getMinus()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(double,org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:getTolerance() (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:getTolerance()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance1(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (O)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:multiply(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getReverse() (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(double,double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:get(int)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getRemainingRegion()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:compareTo(java.lang.Object) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[]) (M)org.apache.commons.math3.fraction.BigFraction:subtract(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:<init>(boolean,double) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:<init>(boolean,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (O)java.util.ArrayList:<init>(int)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:copySelf() (M)org.apache.commons.math3.geometry.euclidean.twod.Line:copySelf()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:asList()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:getLine()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.partitioning.BSPTree:split(org.apache.commons.math3.geometry.partitioning.SubHyperplane)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance(java.util.Locale) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:toString(java.text.NumberFormat) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:<init>(double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isInfinite() (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getStart()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.oned.Interval:getInf()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:<init>() (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:split(org.apache.commons.math3.geometry.euclidean.twod.Line) (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:<init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:<init>(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (I)java.util.List:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[]) (M)org.apache.commons.math3.fraction.BigFraction:add(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:correctOrientation() (M)java.util.ArrayList:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:<init>(boolean) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:<init>(boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (O)org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(double,double,double,double,double,org.apache.commons.math3.geometry.euclidean.twod.Line$1)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getReverse()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.partitioning.BSPTree:<init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.BSPTree,org.apache.commons.math3.geometry.partitioning.BSPTree,java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:getLocation()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree) (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:negate() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:negate()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:divide(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (O)java.util.ArrayList:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:getRemainingRegion()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (O)org.apache.commons.math3.exception.ConvergenceException:<init>()
M:org.apache.commons.math3.geometry.VectorFormat:getAvailableLocales() (S)java.text.NumberFormat:getAvailableLocales()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String,java.text.ParsePosition) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:<init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:getVertices() (M)org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:getVertices()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:max(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:copySelf()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:get(int)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setIncoming(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform) (O)org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (I)java.util.Collection:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (O)org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[])
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (O)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double) (M)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (M)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:findHullVertices(java.util.Collection)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:normalize() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:normalize()
M:org.apache.commons.math3.geometry.VectorFormat:format(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.VectorFormat:format(org.apache.commons.math3.geometry.Vector,java.lang.StringBuffer,java.text.FieldPosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:isDirect()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (O)org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:getTolerance()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:split(org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:subtract(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (S)org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$200(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(double,org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:<init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.VectorFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[]) (S)org.apache.commons.math3.util.CompositeFormat:formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (M)java.text.ParsePosition:getIndex()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:createRegion() (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getLine()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (M)java.util.ArrayList:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance() (S)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance(java.util.Locale)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getSubSpace() (M)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getSubSpace()
M:org.apache.commons.math3.geometry.VectorFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[]) (M)java.text.FieldPosition:setEndIndex(int)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region) (O)org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:isIncludeCollinearPoints() (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:isIncludeCollinearPoints()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:normalize() (O)org.apache.commons.math3.exception.MathArithmeticException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree) (M)org.apache.commons.math3.geometry.partitioning.BoundaryAttribute:getPlusInside()
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.text.NumberFormat) (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:getVertices() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]:clone()
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:min(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:wholeSpace() (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:scalarMultiply(double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:scalarMultiply(double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:hashCode()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (O)org.apache.commons.math3.geometry.euclidean.twod.Segment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:acos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (I)java.util.Collection:toArray(java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getLine()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex) (I)java.util.List:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(double) (O)java.util.ArrayList:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (O)org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (M)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()
M:org.apache.commons.math3.geometry.VectorFormat:format(org.apache.commons.math3.geometry.Vector) (O)java.text.FieldPosition:<init>(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:<init>(double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(double,double,double,double,double,org.apache.commons.math3.geometry.euclidean.twod.Line$1) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(double,double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double[]) (O)org.apache.commons.math3.exception.DimensionMismatchException:<init>(int,int)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line) (O)org.apache.commons.math3.geometry.euclidean.twod.Segment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (M)org.apache.commons.math3.geometry.partitioning.RegionFactory:intersection(org.apache.commons.math3.geometry.partitioning.Region,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm1() (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:minor(org.apache.commons.math3.fraction.BigFraction[],org.apache.commons.math3.fraction.BigFraction[]) (M)org.apache.commons.math3.fraction.BigFraction:multiply(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getSubSpace() (S)org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (O)org.apache.commons.math3.exception.MathParseException:<init>(java.lang.String,int,java.lang.Class)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:retrieveLineSegments() (O)org.apache.commons.math3.geometry.euclidean.twod.Segment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:size()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform) (M)java.awt.geom.AffineTransform:getMatrix(double[])
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (I)org.apache.commons.math3.geometry.partitioning.SubHyperplane:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getStart()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:generate(java.util.Collection) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (I)org.apache.commons.math3.geometry.partitioning.Region:contains(org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (O)java.util.ArrayList:<init>(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getTransform(java.awt.geom.AffineTransform) (O)org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform)
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:getLineSegments() (M)org.apache.commons.math3.geometry.euclidean.twod.Segment[]:clone()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:insert(java.lang.Comparable)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (O)org.apache.commons.math3.geometry.euclidean.twod.Segment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getPointAt(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,double) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:doubleValue()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (S)org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:getEnd()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment) (M)org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:compareTo(org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:<init>() (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:<init>() (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:negate() (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (M)java.lang.Number:doubleValue()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:atan2(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getZero() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getZero()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getRemainingRegion()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(java.lang.Object,java.lang.Object) (M)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:<init>(org.apache.commons.math3.geometry.partitioning.BSPTree,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getEnd()
M:org.apache.commons.math3.geometry.VectorFormat:format(org.apache.commons.math3.geometry.Vector) (O)java.lang.StringBuffer:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (O)java.text.ParsePosition:<init>(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat) (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]:clone()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm() (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (I)java.util.List:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<clinit>() (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getInstance() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:access$000()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:<init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:negate()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.List:isEmpty()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:getLineSegments() (O)org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:retrieveLineSegments()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (O)org.apache.commons.math3.geometry.partitioning.RegionFactory:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNormInf() (S)org.apache.commons.math3.util.FastMath:max(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:createRegion() (O)org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:retrieveLineSegments()
M:org.apache.commons.math3.geometry.VectorFormat:format(org.apache.commons.math3.geometry.Vector) (M)java.lang.StringBuffer:toString()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:<init>() (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setIncoming(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:getLine()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:project(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:toString() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:split(org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (O)org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops)
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:sharedLineWith(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex) (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(double,org.apache.commons.math3.geometry.Vector) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(org.apache.commons.math3.geometry.Vector,java.lang.StringBuffer,java.text.FieldPosition) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.VectorFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[]) (M)java.text.FieldPosition:setBeginIndex(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:<init>() (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (I)org.apache.commons.math3.geometry.partitioning.Region:side(org.apache.commons.math3.geometry.partitioning.Hyperplane)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (M)java.util.ArrayList:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:hashCode()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)java.lang.Object:hashCode()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (O)java.util.ArrayList:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:toString(java.text.NumberFormat) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:asList()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getRemainingRegion()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildNew(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region) (O)org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setOutgoing(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree) (M)org.apache.commons.math3.geometry.partitioning.BSPTree:getAttribute()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:equals(java.lang.Object) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isNaN()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getAngle()
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (O)org.apache.commons.math3.geometry.enclosing.EnclosingBall:<init>(org.apache.commons.math3.geometry.Point,double,org.apache.commons.math3.geometry.Point[])
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (I)org.apache.commons.math3.geometry.partitioning.Region:getTree(boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.partitioning.BSPTree:<init>(java.lang.Object)
M:org.apache.commons.math3.geometry.VectorFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[]) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:dotProduct(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (O)org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:<init>(double[])
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (O)org.apache.commons.math3.fraction.BigFraction:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.partitioning.SubHyperplane$SplitSubHyperplane:<init>(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.SubHyperplane)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:<init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setIncoming(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (M)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean) (O)org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:isIncludeCollinearPoints()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:translateToPoint(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:normalize() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:scalarMultiply(double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:wholeHyperplane() (M)org.apache.commons.math3.geometry.euclidean.twod.Line:wholeHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.List:get(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String,java.text.ParsePosition) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.List:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(org.apache.commons.math3.geometry.Vector) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean) (M)java.util.ArrayList:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (I)org.apache.commons.math3.geometry.partitioning.SubHyperplane:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:createRegion() (O)org.apache.commons.math3.exception.InsufficientDataException:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (M)org.apache.commons.math3.geometry.partitioning.RegionFactory:getComplement(org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (I)org.apache.commons.math3.geometry.partitioning.Region:isEmpty(org.apache.commons.math3.geometry.partitioning.BSPTree)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setOutgoing(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:getLine()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(double,org.apache.commons.math3.geometry.Vector) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:<init>(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex,org.apache.commons.math3.geometry.euclidean.twod.Line) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:setOutgoing(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:dotProduct(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getTolerance()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:<init>(org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:hashCode() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isNaN()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (M)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (O)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:<init>(org.apache.commons.math3.geometry.euclidean.oned.Vector1D,boolean,double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:correctOrientation() (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:readResolve() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:access$000()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (I)java.util.Collection:size()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)java.util.ArrayList:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (M)java.text.ParsePosition:getIndex()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:<init>() (O)org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:<init>(boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:wholeHyperplane() (O)org.apache.commons.math3.geometry.euclidean.oned.IntervalsSet:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1:<clinit>() (S)org.apache.commons.math3.geometry.partitioning.Side:values()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:equals(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:hashCode() (S)org.apache.commons.math3.util.MathUtils:hash(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getTolerance()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:hashCode() (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:getStart()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:equals(java.lang.Object) (M)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:compareTo(org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (S)org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$ComparableSegment:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Line) (O)org.apache.commons.math3.geometry.partitioning.utilities.OrderedTuple:<init>(double[])
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String) (M)java.text.ParsePosition:getErrorIndex()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:size()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(double,org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(org.apache.commons.math3.geometry.Vector,java.lang.StringBuffer,java.text.FieldPosition) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[])
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:bindWith(org.apache.commons.math3.geometry.euclidean.twod.Line) (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (S)org.apache.commons.math3.util.FastMath:signum(double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.fraction.BigFraction:add(org.apache.commons.math3.fraction.BigFraction)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getSpace() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>() (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:visitInternalNode(org.apache.commons.math3.geometry.partitioning.BSPTree) (M)org.apache.commons.math3.geometry.partitioning.BoundaryAttribute:getPlusOutside()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:copySelf() (O)org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:atan2(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String,java.text.ParsePosition) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:parse(java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>() (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point) (O)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:<init>(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (O)org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.List:size()
M:org.apache.commons.math3.geometry.VectorFormat:<init>() (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:remove(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:normalize() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.euclidean.oned.Interval:getInf()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance() (S)java.util.Locale:getDefault()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:wholeHyperplane() (O)org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:wholeHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:correctOrientation() (I)java.util.Iterator:next()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:signum(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.exception.MathIllegalArgumentException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (M)java.text.ParsePosition:setIndex(int)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double[]) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceSq(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceSq(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1:<clinit>() (M)org.apache.commons.math3.geometry.partitioning.Side:ordinal()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:correctOrientation() (O)org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance(java.util.Locale) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat(java.util.Locale)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:hypot(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (I)java.util.List:size()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Edge:split(org.apache.commons.math3.geometry.euclidean.twod.Line) (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (O)org.apache.commons.math3.geometry.partitioning.AbstractSubHyperplane:<init>(org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Region)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isNaN() (S)java.lang.Double:isNaN(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:createRegion() (O)org.apache.commons.math3.geometry.partitioning.RegionFactory:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$1) (O)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:toString() (S)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean) (I)org.apache.commons.math3.geometry.partitioning.Region:checkPoint(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:<init>() (O)org.apache.commons.math3.geometry.partitioning.utilities.AVLTree:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:<clinit>() (O)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:<init>(org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$1)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (I)java.util.List:contains(java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isInfinite() (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isNaN()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:setClockWise(boolean) (I)java.util.Iterator:hasNext()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (M)org.apache.commons.math3.geometry.euclidean.twod.Segment:getEnd()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNormInf() (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:<init>(boolean,double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Point) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.partitioning.RegionFactory:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:<init>(boolean) (O)org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:<init>(boolean,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:project(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double,org.apache.commons.math3.geometry.euclidean.twod.Vector2D)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (M)java.util.ArrayList:iterator()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (I)java.util.Iterator:remove()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:createRegion() (M)org.apache.commons.math3.geometry.partitioning.RegionFactory:buildConvex(org.apache.commons.math3.geometry.partitioning.Hyperplane[])
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (O)org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:<init>(java.util.Collection,double)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getAngle()
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat) (M)java.lang.String:trim()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (I)java.util.List:add(int,java.lang.Object)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.oned.Interval:getSup()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (S)java.util.Collections:sort(java.util.List,java.util.Comparator)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:getSegments() (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:intersection(org.apache.commons.math3.geometry.euclidean.twod.SubLine,boolean) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getHyperplane()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getTolerance()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (M)org.apache.commons.math3.geometry.euclidean.oned.Interval:getSup()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSpace(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.oned.Vector1D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:scalarMultiply(double) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:add(org.apache.commons.math3.geometry.euclidean.twod.NestedLoops) (I)org.apache.commons.math3.geometry.partitioning.Region:isEmpty()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:wholeSpace() (M)org.apache.commons.math3.geometry.euclidean.twod.Line:wholeSpace()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (I)java.util.List:get(int)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)org.apache.commons.math3.exception.MathArithmeticException:<init>(org.apache.commons.math3.exception.util.Localizable,java.lang.Object[])
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:add(org.apache.commons.math3.geometry.Vector) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:<init>(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (I)java.util.List:add(java.lang.Object)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(double,double,double,double,double) (O)java.lang.Object:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(org.apache.commons.math3.geometry.Vector) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:subtract(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:asin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:format(org.apache.commons.math3.geometry.Vector,java.lang.StringBuffer,java.text.FieldPosition) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.twod.SubLine:getRemainingRegion()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.text.NumberFormat) (O)org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String,java.text.NumberFormat)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:toSubSpace(org.apache.commons.math3.geometry.Point) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getX()
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (M)org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getY()
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.partitioning.BSPTree:getPlus()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (I)java.util.List:size()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$Vertex:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (O)java.util.ArrayList:<init>()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (M)org.apache.commons.math3.geometry.euclidean.twod.Line:getOffset(org.apache.commons.math3.geometry.Vector)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (M)org.apache.commons.math3.geometry.euclidean.oned.OrientedPoint:wholeHyperplane()
