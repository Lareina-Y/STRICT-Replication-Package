M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(org.eclipse.ecf.filetransfer.IFileRangeSpecification) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.filetransfer.Activator:getExtensionRegistry()
M:org.eclipse.ecf.filetransfer.FileTransferJob:run(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.ecf.filetransfer.IFileTransferRunnable:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.Throwable,int,java.util.Map) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String,java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IExtensionRegistry:getExtensionPoint(java.lang.String)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.FileTransferJob:run(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.filetransfer.Activator:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.filetransfer.Activator:getExtensionRegistry() (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String) (O)org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String,java.lang.String)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (O)org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.filetransfer.Activator:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.filetransfer.Activator:getExtensionRegistry() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.filetransfer.FileTransferJob:canceling() (I)org.eclipse.ecf.filetransfer.IFileTransfer:cancel()
M:org.eclipse.ecf.internal.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (I)org.eclipse.ecf.core.identity.IIDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(java.lang.String,java.lang.Throwable,org.eclipse.ecf.filetransfer.IFileRangeSpecification) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.filetransfer.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(int) (O)org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>()
M:org.eclipse.ecf.filetransfer.FileTransferInfo:getMimeType() (I)java.net.FileNameMap:getContentTypeFor(java.lang.String)
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getException()
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(java.lang.String,org.eclipse.ecf.filetransfer.IFileRangeSpecification) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.filetransfer.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (M)java.util.Hashtable:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int,java.util.Map) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.filetransfer.UserCancelledException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String,java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File) (O)org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map)
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IExtensionPoint:getConfigurationElements()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (M)org.eclipse.core.runtime.CoreException:getStatus()
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(int) (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>()
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(int) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>()
M:org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String,java.lang.String) (O)java.util.HashMap:<init>()
M:org.eclipse.ecf.internal.filetransfer.Activator:getLogService() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (M)org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.filetransfer.FileTransferInfo:getFileSize() (M)java.io.File:length()
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:getMimeType() (M)java.io.File:getAbsolutePath()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IConfigurationElement:createExecutableExtension(java.lang.String)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:<clinit>() (O)org.eclipse.ecf.filetransfer.identity.FileIDFactory:<init>()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String,java.lang.String) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.net.URL) (M)org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.internal.filetransfer.Activator:getLogService() (M)java.lang.Class:getName()
M:org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (M)org.eclipse.ecf.internal.filetransfer.Activator:getLogService()
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.String) (M)org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.osgi.service.log.LogService:log(int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(org.eclipse.core.runtime.IStatus,org.eclipse.ecf.filetransfer.IFileRangeSpecification) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.filetransfer.Activator:getDefault() (O)org.eclipse.ecf.internal.filetransfer.Activator:<init>()
M:org.eclipse.ecf.filetransfer.FileTransferInfo:getMimeType() (S)java.net.URLConnection:getFileNameMap()
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (O)java.util.Hashtable:<init>()
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(java.lang.Throwable,org.eclipse.ecf.filetransfer.IFileRangeSpecification) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map) (O)org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.filetransfer.Activator:setupProtocolHandlers(org.osgi.framework.BundleContext) (I)org.osgi.framework.BundleContext:registerService(java.lang.String,java.lang.Object,java.util.Dictionary)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable,int,java.util.Map) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.FileTransferJob:<init>(java.lang.String) (M)org.eclipse.ecf.filetransfer.FileTransferJob:setSystem(boolean)
M:org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.filetransfer.UserCancelledException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.filetransfer.SendFileTransferException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>()
M:org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable,int) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.FileTransferJob:<init>(java.lang.String) (O)org.eclipse.core.runtime.jobs.Job:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String)
M:org.eclipse.ecf.filetransfer.identity.FileCreateException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.core.identity.URIID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URI:compareTo(java.net.URI)
M:org.eclipse.ecf.core.identity.Namespace:testIDEquals(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.LongID:namespaceGetName() (M)java.lang.Long:toString()
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.core.identity.LongID:longValue() (M)java.lang.Long:longValue()
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:printStackTrace(java.io.PrintStream)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.UuID:toString() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:initialize() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getMessage()
M:org.eclipse.ecf.core.util.SystemLogService:log(org.osgi.framework.ServiceReference,int,java.lang.String) (M)org.eclipse.ecf.core.util.SystemLogService:log(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus) (O)java.lang.RuntimeException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[]) (M)java.lang.StringBuffer:append(int)
M:org.eclipse.ecf.core.identity.StringID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.StringID:getName()
M:org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getCode()
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[]) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.IDFactory:createURIID(java.net.URI) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.LongID:<init>(org.eclipse.ecf.core.identity.Namespace,long) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.IDFactory:createLongID(long) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.StringID:setEmptyNamespace() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.core.identity.IDFactory:createUuID() (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createGUID(int) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.StringID:equals(java.lang.Object) (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)java.util.Hashtable:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.core.identity.Activator:getDefault() (O)org.eclipse.ecf.internal.core.identity.Activator:<init>()
M:org.eclipse.ecf.core.identity.UuID:namespaceHashCode() (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.identity.UuID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.UuID:getName()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.util.ArrayList:add(java.lang.Object)
M:org.eclipse.ecf.core.util.ECFException:<init>() (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.StringID:getNamespace() (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.util.ArrayList:size()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.GUID$GUIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.GUID$GUIDNamespace:getInitStringFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.core.util.BundleStarter:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator:getDebugOptions() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.SystemLogService:log(int,java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.BaseID:equals(java.lang.Object) (M)org.eclipse.ecf.core.identity.Namespace:testIDEquals(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.LongID:<init>() (O)org.eclipse.ecf.core.identity.BaseID:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int)
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>() (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[]) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus) (M)org.eclipse.ecf.core.util.ECFRuntimeException:initCause(java.lang.Throwable)
M:org.eclipse.ecf.internal.core.identity.Activator:getDebugOptions() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.util.Base64:decode(java.lang.String) (S)org.eclipse.ecf.core.util.Base64:decodeFromCharArray(byte[])
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:logWarning(java.lang.Throwable) (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.SystemLogService:getLogger(java.lang.Class) (O)java.lang.UnsupportedOperationException:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuffer:append(char)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.String:indexOf(int,int)
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (M)java.util.UUID:toString()
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.lang.String) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (I)java.util.List:contains(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.String:indexOf(java.lang.String,int)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)java.util.Hashtable:<init>()
M:org.eclipse.ecf.core.util.AbstractFactory:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (M)java.lang.Class:isArray()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.URIID:namespaceHashCode() (M)java.net.URI:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getDeclaringExtension()
M:org.eclipse.ecf.core.identity.StringID:toString() (M)java.lang.StringBuffer:insert(int,char)
M:org.eclipse.ecf.core.identity.LongID:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:createExecutableExtension(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:namespaceHashCode() (M)java.lang.String:hashCode()
M:org.eclipse.ecf.core.util.Trace:getTimeString() (O)java.util.Date:<init>()
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$3:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (I)org.eclipse.core.runtime.IExtensionRegistry:getExtensionPoint(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Base64:decodeFromCharArray(byte[]) (S)org.eclipse.ecf.core.util.Base64:decodeDigit(byte)
M:org.eclipse.ecf.internal.core.identity.Activator$4:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$2(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.core.util.SystemLogService:log(int,java.lang.String) (M)org.eclipse.ecf.core.util.SystemLogService:log(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>() (O)java.lang.RuntimeException:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.util.ArrayList:add(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:createURIID(java.lang.String) (O)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.LongID:namespaceHashCode() (M)java.lang.Long:hashCode()
M:org.eclipse.ecf.core.util.SystemLogService:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.StringUtils:splitSubstring(java.lang.String,java.lang.String,int) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.identity.Namespace:testIDEquals(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.Namespace:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String) (I)org.eclipse.osgi.service.debug.DebugOptions:getOption(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.util.UUID) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:createGUID(int) (O)org.eclipse.ecf.core.identity.GUID$GUIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.URIID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getPlugin()
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.String:indexOf(int)
M:org.eclipse.ecf.core.util.Trace:<clinit>() (O)java.util.HashMap:<init>()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:length()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtension:getConfigurationElements()
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.util.ArrayList:size()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (I)org.osgi.framework.ServiceReference:getBundle()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (O)java.lang.Boolean:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createGUID() (M)org.eclipse.ecf.core.identity.IDFactory:createGUID(int)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.core.identity.StringID:toString() (M)java.lang.StringBuffer:insert(int,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.identity.StringID:getName() (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.identity.URIID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (O)java.net.URI:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.core.identity.Namespace:toExternalForm(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:<init>() (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:getAdapterManager() (M)org.eclipse.ecf.core.util.AdapterManagerTracker:open()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.core.runtime.CoreException:getStatus()
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.ecf.core.identity.IIDFactory:removeNamespace(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.LongID:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (I)org.osgi.framework.BundleContext:getBundles()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaces() (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.eclipse.ecf.core.identity.StringID:equals(java.lang.Object) (O)org.eclipse.ecf.core.identity.BaseID:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:getMessage()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:<init>() (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.NamespacePermission:<init>() (O)java.security.BasicPermission:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.URIID:<init>() (O)org.eclipse.ecf.core.identity.BaseID:<init>()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID:<init>(org.eclipse.ecf.core.identity.UuID$UuIDNamespace,java.util.UUID) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:getName()
M:org.eclipse.ecf.core.identity.StringID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:getScheme() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:printStackTrace(java.io.PrintStream)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.identity.GUID:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (O)java.util.Date:<init>()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.AdapterManagerTracker:<init>(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.core.util.AdapterManagerTracker:<init>(org.osgi.framework.BundleContext,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:initialize(java.lang.String,java.lang.String) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>(java.lang.String,java.lang.String) (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:<init>() (O)org.eclipse.ecf.core.identity.BaseID:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.identity.Namespace:testIDEquals(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:getNamespace()
M:org.eclipse.ecf.core.identity.StringID:toExternalForm() (O)org.eclipse.ecf.core.identity.BaseID:toExternalForm()
M:org.eclipse.ecf.core.identity.StringID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.String:compareTo(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (I)org.osgi.framework.Bundle:getState()
M:org.eclipse.ecf.core.identity.LongID:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (M)java.lang.reflect.Method:invoke(java.lang.Object,java.lang.Object[])
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.lang.String:indexOf(int)
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (I)org.osgi.framework.Bundle:loadClass(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.core.identity.Activator$4:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:createStringID(java.lang.String) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[]) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.Namespace:getHashCodeForID(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:namespaceHashCode()
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.BaseID:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (S)org.eclipse.ecf.core.util.Base64:encode(byte[])
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$2(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.internal.core.identity.Activator:getDebugOptions() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.identity.URIID:toString() (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaceByName(java.lang.String) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(java.lang.String)
M:org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (I)org.osgi.framework.ServiceRegistration:unregister()
M:org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator$1:removedService(org.osgi.framework.ServiceReference,java.lang.Object) (S)org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.String:length()
M:org.eclipse.ecf.internal.core.identity.Activator:getLogService() (O)org.eclipse.ecf.core.util.SystemLogService:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.BaseID:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)java.util.Hashtable:containsKey(java.lang.Object)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:getMessage()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtensionDelta:getExtension()
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:printStackTrace(java.io.PrintStream)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getException()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:getRandom(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.LongID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Long:compareTo(java.lang.Long)
M:org.eclipse.ecf.core.identity.IDFactory:initialize() (M)org.eclipse.ecf.internal.core.identity.Activator:setupNamespaceExtensionPoint()
M:org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String) (S)java.security.SecureRandom:getInstance(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.IDFactory:createUuID() (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.core.identity.Activator:setupNamespaceExtensionPoint() (O)org.eclipse.ecf.internal.core.identity.Activator$3:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:length()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (M)java.io.PrintStream:println(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:namespaceHashCode() (M)java.lang.Object:hashCode()
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:getScheme() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Base64:encode(byte[]) (O)java.lang.NullPointerException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:isPlatformAvailable()
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID:toString() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID:namespaceHashCode() (M)java.lang.Object:hashCode()
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.identity.UuID:<init>(org.eclipse.ecf.core.identity.UuID$UuIDNamespace,java.util.UUID) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.util.ArrayList:toArray(java.lang.Object[])
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:<init>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$4:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext) (O)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:<init>(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.util.SystemLogService:getLogger(java.lang.Class,java.lang.Class) (O)java.lang.UnsupportedOperationException:<init>()
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.AdapterManagerTracker:getAdapterManager() (M)org.eclipse.ecf.core.util.AdapterManagerTracker:getService()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.identity.IDFactory:createStringID(java.lang.String) (O)org.eclipse.ecf.core.identity.StringID$StringIDNamespace:<init>()
M:org.eclipse.ecf.core.util.Base64:encode(byte[]) (S)org.eclipse.ecf.core.util.Base64:encodeToCharArray(byte[])
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getException()
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtensionDelta:getKind()
M:org.eclipse.ecf.core.identity.URIID:namespaceHashCode() (M)java.lang.String:hashCode()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.IDCreateException:<init>() (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>()
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:run() (M)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:runWithoutRegistry()
M:org.eclipse.ecf.internal.core.identity.Activator$3:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext) (O)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:<init>(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.identity.UuID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:getName()
M:org.eclipse.ecf.core.util.SystemLogService:getLogger(org.osgi.framework.Bundle,java.lang.String,java.lang.Class) (O)java.lang.UnsupportedOperationException:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:<init>(org.eclipse.ecf.internal.core.identity.Activator$2) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (M)org.eclipse.ecf.core.identity.IDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (M)java.lang.Class:getMethod(java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.Trace:<clinit>() (M)java.lang.Exception:printStackTrace(java.io.PrintStream)
M:org.eclipse.ecf.internal.core.identity.Activator:getBundle() (I)org.osgi.framework.BundleContext:getBundle()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)java.util.Hashtable:get(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,int) (O)org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.core.identity.Activator$2:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.util.ArrayList:toArray(java.lang.Object[])
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.BaseID:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:getAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.core.identity.Activator:getBundle()
M:org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String) (S)java.security.SecureRandom:getInstance(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.StringID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String) (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.identity.StringID:getName() (O)org.eclipse.ecf.core.identity.BaseID:getName()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.SystemLogService:getLogCode(int)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.lang.String:indexOf(int)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.StringID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.StringID$StringIDNamespace:getName()
M:org.eclipse.ecf.core.identity.URIID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URI:toString()
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:<init>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.util.Trace:getTimeString() (O)java.text.SimpleDateFormat:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.StringID:toString() (O)java.lang.StringBuffer:<init>(int)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:getName()
M:org.eclipse.ecf.core.identity.BaseID:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$3:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (I)org.eclipse.core.runtime.IExtensionPoint:getConfigurationElements()
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.LongID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.Long)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Base64:encode(byte[]) (O)java.lang.String:<init>(byte[],java.lang.String)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.core.identity.UuID:namespaceHashCode() (M)java.util.UUID:hashCode()
M:org.eclipse.ecf.core.util.SystemLogService:log(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.BaseID:toExternalForm() (M)org.eclipse.ecf.core.identity.Namespace:toExternalForm(org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (M)java.security.SecureRandom:nextBytes(byte[])
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuilder:append(char)
M:org.eclipse.ecf.core.identity.URIID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (M)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[])
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.StringID:getName()
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.core.identity.UuID:<init>() (O)org.eclipse.ecf.core.identity.BaseID:<init>()
M:org.eclipse.ecf.core.util.IDFactoryTracker:<init>(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:handleException(java.lang.Throwable) (M)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:logWarning(java.lang.Throwable)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[])
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[]) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Base64:decodeDigit(byte) (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.BaseID:getName() (M)org.eclipse.ecf.core.identity.Namespace:getNameForID(org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.UuID:toString() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.SystemLogService:getLogger(java.lang.String,java.lang.Class) (O)java.lang.UnsupportedOperationException:<init>()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>() (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.NamespacePermission:<init>(java.lang.String) (O)java.security.BasicPermission:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:splitSubstring(java.lang.String,java.lang.String,int) (M)java.lang.String:length()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (M)java.lang.String:split(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:<init>(java.lang.String,java.lang.String) (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.String) (M)org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.core.identity.IDFactory:createStringID(java.lang.String) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator$3:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (M)org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.core.identity.Activator:getAdapterManager()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (S)org.eclipse.ecf.internal.core.identity.Activator:access$0(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (M)java.lang.Class:isInstance(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:getTimeString() (M)java.text.SimpleDateFormat:format(java.util.Date)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.AbstractFactory:getClassesForTypes(java.lang.String[],java.lang.Object[],java.lang.ClassLoader) (S)java.lang.Class:forName(java.lang.String,boolean,java.lang.ClassLoader)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:<init>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[]) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.UuID:namespaceGetName() (M)java.util.UUID:toString()
M:org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.IDFactory:<init>()
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.LongID$LongNamespace:getName()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (I)org.osgi.framework.Bundle:start()
M:org.eclipse.ecf.core.util.IDFactoryTracker:getIDFactory() (M)org.eclipse.ecf.core.util.IDFactoryTracker:getService()
M:org.eclipse.ecf.internal.core.identity.Activator$2:<init>(org.eclipse.ecf.internal.core.identity.Activator,org.osgi.framework.BundleContext) (O)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:<init>(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.identity.Namespace:initialize(java.lang.String,java.lang.String) (M)java.lang.String:hashCode()
M:org.eclipse.ecf.core.identity.StringID:compareTo(java.lang.Object) (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID:namespaceHashCode() (M)java.lang.Object:hashCode()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.StringID$StringIDNamespace:getInitStringFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:toString() (M)java.lang.String:length()
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:<init>() (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getCode()
M:org.eclipse.ecf.core.identity.URIID:namespaceGetName() (M)java.net.URI:toString()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.internal.core.identity.Activator:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.identity.UuID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.util.UUID:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:<clinit>() (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:getName()
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (M)java.text.SimpleDateFormat:format(java.util.Date)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.lang.String:length()
M:org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.StringUtils:splitSubstring(java.lang.String,java.lang.String,int) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.util.ArrayList:toArray(java.lang.Object[])
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.BaseID:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.core.identity.Activator:getAdapterManager()
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.net.URI) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String) (M)org.eclipse.ecf.internal.core.identity.Activator:getDebugOptions()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:splitSubstring(java.lang.String,java.lang.String,int) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Base64:decodeDigit(byte) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:getInitStringFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Base64:decode(java.lang.String) (O)java.lang.NullPointerException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.core.util.AdapterManagerTracker:<init>(org.osgi.framework.BundleContext,org.osgi.util.tracker.ServiceTrackerCustomizer) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.AbstractFactory:getClassesForTypes(java.lang.String[],java.lang.Object[],java.lang.ClassLoader) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:compareTo(java.lang.Object) (O)org.eclipse.ecf.core.identity.BaseID:compareTo(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.util.UUID) (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.BaseID:hashCode() (M)org.eclipse.ecf.core.identity.Namespace:getHashCodeForID(org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.LongID:<init>(org.eclipse.ecf.core.identity.Namespace,long) (O)java.lang.Long:<init>(long)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[])
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:toString() (M)org.eclipse.ecf.core.identity.Namespace:getScheme()
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.osgi.service.log.LogService:log(int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (M)org.eclipse.ecf.internal.core.identity.Activator:getBundleContext()
M:org.eclipse.ecf.core.util.SystemLogService:<clinit>() (O)java.text.SimpleDateFormat:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:toLowerCase()
M:org.eclipse.ecf.core.util.PlatformHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (M)java.lang.Exception:getMessage()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.util.UUID:fromString(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:getDebugOptions() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:logWarning(java.lang.Throwable) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (M)org.eclipse.ecf.internal.core.identity.Activator:getLogService()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.core.identity.Namespace:initialize(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createURIID(java.lang.String) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.identity.LongID:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.BaseID:compareTo(java.lang.Object) (S)org.eclipse.core.runtime.Assert:isTrue(boolean,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:getAdapterManager() (O)org.eclipse.ecf.core.util.AdapterManagerTracker:<init>(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:hashCode() (O)org.eclipse.ecf.core.identity.BaseID:hashCode()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IRegistryChangeEvent:getExtensionDeltas(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.ECFException:<init>(java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaces() (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getNameForID(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:namespaceGetName()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:run() (M)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry)
M:org.eclipse.ecf.core.util.AdapterManagerTracker:getAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.core.identity.Activator$1:<init>(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:logWarning(java.lang.Throwable) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.StringID:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:getScheme() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$1(org.eclipse.ecf.internal.core.identity.Activator,java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getCompareToForObject(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.core.identity.BaseID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.GUID$GUIDNamespace:getName()
M:org.eclipse.ecf.core.identity.URIID:toString() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.Throwable) (M)java.lang.Throwable:getMessage()
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (I)org.osgi.framework.BundleContext:getService(org.osgi.framework.ServiceReference)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (M)java.lang.Class:getMethod(java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.StringBuffer:append(int)
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:createLongID(long) (O)java.lang.Long:<init>(long)
M:org.eclipse.ecf.core.identity.StringID:toString() (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.identity.BaseID:compareTo(java.lang.Object) (M)org.eclipse.ecf.core.identity.Namespace:getCompareToForObject(org.eclipse.ecf.core.identity.BaseID,org.eclipse.ecf.core.identity.BaseID)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace0(java.lang.String) (M)java.util.Hashtable:get(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaces() (M)java.util.Hashtable:values()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.net.URI) (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getSeverity()
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.StringBuilder:append(char)
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (O)org.eclipse.ecf.internal.core.identity.Activator$2$1:<init>(org.eclipse.ecf.internal.core.identity.Activator$2)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.Namespace:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.LogHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.Namespace:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (S)org.eclipse.ecf.core.util.PlatformHelper:isPlatformAvailable()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.ECFException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:run() (O)org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (M)java.net.URI:getSchemeSpecificPart()
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.String) (M)org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[])
M:org.eclipse.ecf.core.identity.IDCreateException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.UuID:<init>(org.eclipse.ecf.core.identity.UuID$UuIDNamespace,java.util.UUID)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace) (O)org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,int)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.URIID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getMessage()
M:org.eclipse.ecf.core.identity.StringID:setEmptyNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:getInitStringFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.core.util.StringUtils:splitOnSpace(java.lang.String) (M)java.util.ArrayList:add(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.AdapterManagerTracker:<init>(org.osgi.framework.BundleContext,org.osgi.util.tracker.ServiceTrackerCustomizer) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.StringID$StringIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>(java.lang.String,java.lang.String) (O)org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)java.util.Hashtable:remove(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>() (O)org.eclipse.ecf.core.identity.StringID:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (M)java.lang.reflect.Method:invoke(java.lang.Object,java.lang.Object[])
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (M)org.eclipse.ecf.core.identity.Namespace:getScheme()
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (I)java.util.List:contains(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (M)org.eclipse.ecf.core.identity.Namespace:createInstance(java.lang.Object[])
M:org.eclipse.ecf.core.identity.Namespace:<init>(java.lang.String,java.lang.String) (M)org.eclipse.ecf.core.identity.Namespace:initialize(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.StringID:namespaceHashCode() (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[]) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.ecf.core.identity.IIDFactory:containsNamespace(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:length()
M:org.eclipse.ecf.internal.core.identity.Activator:getLogService() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getException()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID:toString() (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (I)org.osgi.framework.BundleContext:registerService(java.lang.String,java.lang.Object,java.util.Dictionary)
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.util.ArrayList:toArray(java.lang.Object[])
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.lang.String:length()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (S)org.eclipse.ecf.core.identity.GUID:getRandom(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.LongID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.Long) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.URIID:toString() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.util.UUID:randomUUID()
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.internal.core.identity.Activator$4:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (I)org.eclipse.core.runtime.IExtensionRegistry:removeRegistryChangeListener(org.eclipse.core.runtime.IRegistryChangeListener)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getChildren()
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (S)org.eclipse.ecf.core.util.Trace:getTimeString()
M:org.eclipse.ecf.core.identity.URIID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:createUuID(java.lang.String) (O)org.eclipse.ecf.core.identity.UuID$UuIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaceByName(java.lang.String) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.Namespace:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,char) (M)java.util.ArrayList:add(java.lang.Object)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.identity.URIID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (S)java.lang.Long:decode(java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.identity.UuID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.String:compareTo(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:toExternalForm() (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.core.util.AdapterManagerTracker:close()
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (M)java.util.ArrayList:size()
M:org.eclipse.ecf.core.identity.UuID:toString() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String,int) (O)java.util.ArrayList:<init>(int)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.core.identity.LongID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.Long:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)java.lang.Boolean:valueOf(boolean)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (M)org.eclipse.ecf.core.identity.BaseID:namespaceGetName()
M:org.eclipse.ecf.core.util.Base64:decodeDigit(byte) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,int)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String) (O)org.eclipse.ecf.core.identity.StringID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.identity.StringID:hashCode() (M)org.eclipse.ecf.core.identity.StringID:setEmptyNamespace()
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (M)java.io.PrintStream:println(java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.identity.NamespacePermission:<init>(java.lang.String,java.lang.String) (O)java.security.BasicPermission:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IExtension:getExtensionPointUniqueIdentifier()
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)java.lang.Throwable:getMessage()
M:org.eclipse.ecf.core.identity.IDFactory:createLongID(long) (O)org.eclipse.ecf.core.identity.LongID$LongNamespace:<init>()
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.core.identity.Activator:getLogService() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace) (M)org.eclipse.ecf.core.identity.Namespace:getName()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.core.identity.Activator:getAdapterManager() (M)org.eclipse.ecf.core.util.AdapterManagerTracker:getAdapterManager()
M:org.eclipse.ecf.internal.core.identity.Activator:setupNamespaceExtensionPoint() (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.identity.Namespace:equals(java.lang.Object) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:<init>(org.osgi.framework.BundleContext) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.URIID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.Namespace:getScheme()
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (I)org.osgi.framework.BundleContext:getBundles()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (S)java.util.UUID:randomUUID()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable) (O)org.eclipse.ecf.core.util.ECFRuntimeException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:contains(java.lang.String,java.lang.String) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.ECFException:<init>(org.eclipse.core.runtime.IStatus) (O)org.eclipse.core.runtime.CoreException:<init>(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.internal.core.identity.Activator$2:access$0(org.eclipse.ecf.internal.core.identity.Activator$2)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (I)java.util.List:add(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.SystemLogService:getLogger(java.lang.String) (O)java.lang.UnsupportedOperationException:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:createID(java.lang.String,java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:createGUID(int) (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.core.identity.URIID:namespaceHashCode() (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (M)java.io.PrintStream:println(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.util.IDFactoryTracker:<init>(org.osgi.framework.BundleContext) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.identity.StringID:setEmptyNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.util.StringUtils:split(java.lang.String,java.lang.String) (M)java.util.ArrayList:size()
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (I)org.eclipse.core.runtime.IExtensionRegistry:addRegistryChangeListener(org.eclipse.core.runtime.IRegistryChangeListener)
M:org.eclipse.ecf.core.identity.IDFactory:createURIID(java.net.URI) (O)org.eclipse.ecf.core.identity.URIID$URIIDNamespace:<init>()
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (M)org.eclipse.ecf.core.identity.LongID$LongNamespace:getInitStringFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (O)org.eclipse.ecf.core.identity.StringID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$1:<init>(org.eclipse.ecf.internal.core.identity.Activator) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.Base64:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Base64:decode(java.lang.String) (M)java.lang.String:getBytes(java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (O)org.eclipse.ecf.core.identity.LongID$LongNamespace:<init>()
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Base64:decodeDigit(byte) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:setSocketFactoryForConnection(java.net.URLConnection) (O)org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:getSSLSocketFactory()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:setSocketFactoryForConnection(java.net.URLConnection) (M)javax.net.ssl.HttpsURLConnection:setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:getSSLSocketFactory() (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:dispose() (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:getSSLSocketFactory() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:getSSLSocketFactory() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.ssl.ECFURLConnectionModifier:getSSLSocketFactory() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins() (M)java.util.StringTokenizer:nextToken()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFileNameOnly() (M)java.net.URI:getPath()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)java.net.URLConnection:getContentLength()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:getName() (M)java.net.URL:getPath()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:isCanceled()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)org.eclipse.ecf.filetransfer.events.socket.ISocketListener:handleSocketEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$UrlConnectionAuthenticator:getPasswordAuthentication() (M)java.lang.String:toCharArray()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (I)org.eclipse.ecf.filetransfer.IRemoteFileSystemBrowserContainerAdapter:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:sendBrowseRequest() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:setRequest(org.eclipse.ecf.filetransfer.IRemoteFileSystemRequest)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setSendBufferSize(int) (M)java.net.Socket:setSendBufferSize(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IContributor:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (I)java.util.Map:keySet()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:skip(long) (M)java.lang.Object:notify()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:connect(java.net.SocketAddress,int) (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (M)org.eclipse.ecf.core.security.NameCallback:getName()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read() (O)org.eclipse.core.runtime.OperationCanceledException:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:removeListener(org.eclipse.ecf.filetransfer.events.socket.ISocketListener) (I)java.util.List:remove(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransfer(java.lang.String) (I)org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory:newInstance()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)java.io.File:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:close()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (O)java.util.HashSet:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (M)java.net.URLConnection:addRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:bind(java.net.SocketAddress) (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:<clinit>() (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:getInputStream()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:cancel() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:getException()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.Proxy:getPassword()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (M)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:readPendingInput()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceivePausedEvent()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read(byte[],int,int) (O)java.io.InterruptedIOException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceivePausedEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:substring(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransferPriority(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getFileLength() (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFileSize()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.net.URLConnection:setRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (O)org.eclipse.ecf.core.security.ObjectCallback:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:openConnection(java.net.URL) (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransferFactoryId(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getDecompressedStream() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getCompressionResponseHeader()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser,org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser) (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$RemoteFileSystemRequest:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (M)java.lang.Class:isInstance(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDoneEvent()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketCloseTimeout() (O)java.lang.Integer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:targetHasGzSuffix(java.lang.String) (M)java.lang.String:endsWith(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:skip(long) (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:checkCancellation()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getAttributes()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URI:getScheme()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser$UrlConnectionAuthenticator:getPasswordAuthentication() (M)java.lang.String:toCharArray()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.util.StringTokenizer:hasMoreTokens()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (I)org.eclipse.core.runtime.IConfigurationElement:getDeclaringExtension()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.net.URLConnection:getHeaderField(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:<init>(long,long,org.eclipse.ecf.filetransfer.identity.IFileID) (O)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (M)org.eclipse.ecf.core.security.ObjectCallback:getObject()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:connect()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setReceiveBufferSize(int) (M)java.net.Socket:setReceiveBufferSize(int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (I)org.eclipse.core.runtime.IExtensionPoint:getConfigurationElements()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URI:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)java.io.BufferedOutputStream:<init>(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String) (M)java.io.File:isHidden()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$1:getPasswordAuthentication() (M)java.lang.String:toCharArray()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setInputStream(java.io.InputStream) (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getTcpNoDelay() (M)java.net.Socket:getTcpNoDelay()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (S)java.util.Collections:unmodifiableMap(java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:skip(long) (O)org.eclipse.core.runtime.OperationCanceledException:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser$UrlConnectionAuthenticator:<init>(org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser) (O)java.net.Authenticator:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupTimeouts() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (M)org.osgi.util.tracker.ServiceTracker:getServiceReferences()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:getName() (I)org.eclipse.ecf.filetransfer.identity.IFileID:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getOutgoingNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:<init>(java.io.File) (O)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URI:getScheme()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (O)org.eclipse.ecf.core.security.ObjectCallback:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:charAt(int)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:setInputStream(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$UrlConnectionAuthenticator:getPasswordAuthentication() (O)java.net.PasswordAuthentication:<init>(java.lang.String,char[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isPaused()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransferFactoryId(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getRetrieveFileTransferFactoryId(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read() (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:checkCancellation()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.lang.String:endsWith(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getURI() (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (M)java.lang.String:length()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:getHeaderField(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransferFactoryId(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketCloseTimeout() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy) (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$RemoteFileSystemRequest:cancel() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:cancel()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:<init>(java.lang.Object,int,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getURLConnectionModifier()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:setProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:cancel() (M)org.eclipse.core.runtime.jobs.Job:cancel()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double) (M)java.text.DecimalFormat:format(double)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:runRequest() (M)java.io.File:listFiles()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getInetAddress() (M)java.net.Socket:getInetAddress()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator) (O)org.osgi.service.url.AbstractURLStreamHandlerService:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:checkError()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttributeKeys()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getReuseAddress() (M)java.net.Socket:getReuseAddress()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:isOutputShutdown() (M)java.net.Socket:isOutputShutdown()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues() (O)java.net.ConnectException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:<init>(java.lang.Object,int,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:getLastModified()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:readUntilDone() (M)java.lang.Object:notify()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:pause() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:doPause()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:sendBrowseRequest()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:openStreams()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (I)org.eclipse.core.net.proxy.IProxyData:getType()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)java.net.URLConnection:getHeaderField(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (S)org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:isSchemeRegistered(java.lang.String,java.lang.String[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:createRemoteFileEvent() (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)org.eclipse.ecf.filetransfer.InvalidFileRangeSpecificationException:<init>(java.lang.String,org.eclipse.ecf.filetransfer.IFileRangeSpecification)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.OutputStream) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.String:length()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues() (M)java.net.URLConnection:getLastModified()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:isHTTP() (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:getAttributeKeys() (I)java.util.List:iterator()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setCompressionRequestHeader() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getFileRangeSpecification()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketConnectedEvent:setSocket(java.net.Socket) (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:setSocket(java.net.Socket)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getDeclaringExtension()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long) (M)java.lang.Thread:start()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)java.lang.StringBuilder:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransferPriority(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:toString() (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFileSize()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.filetransfer.FileTransferJob:setFileTransfer(org.eclipse.ecf.filetransfer.IFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doPause() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isDone()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransferFactoryId(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetryAttempts() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneException(java.lang.Exception)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<clinit>() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getRemoteSocketAddress() (M)java.net.Socket:getRemoteSocketAddress()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:isDirectory() (M)java.io.File:isDirectory()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isDone()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:substring(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getOptions()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURI()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransferFactoryId(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyData:getPort()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:runThread() (M)java.io.InputStream:close()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:readUntilDone() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:isBufferFull()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)org.eclipse.ecf.filetransfer.events.socket.ISocketListener:handleSocketEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:sendBrowseRequest()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setCompressionRequestHeader()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:isHTTP()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (O)org.eclipse.ecf.core.security.UnsupportedCallbackException:<init>(org.eclipse.ecf.core.security.Callback,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:isDone()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setInputStream(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:getException() (S)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:access$0(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:charAt(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getRetrieveFileTransferFactoryId(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Map:keySet()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (M)java.lang.Object:notify()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.net.Socket:bind(java.net.SocketAddress)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:setInputStream(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:trim()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransferFactoryId(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.lang.StringBuilder:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.HttpURLConnection:setRequestMethod(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:<init>(java.net.Socket) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:<init>(java.io.File) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getCompressionResponseHeader() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getDeclaringExtension()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.Proxy:getAddress()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneCanceled(java.lang.Exception) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:newUserCancelledException()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getOutgoingNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.ecf.filetransfer.IRemoteFileSystemListener:handleRemoteFileEvent(org.eclipse.ecf.filetransfer.events.IRemoteFileSystemEvent)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.net.URLConnection:getHeaderField(int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URL:openConnection()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$1:getAdapter(java.lang.Class) (M)java.lang.Class:isInstance(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$RemoteFileSystemRequest:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (O)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$2:<init>(org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.lang.String:trim()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:isHTTP()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:<init>() (O)org.eclipse.ecf.core.identity.Namespace:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:getException()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Iterator:next()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IExtension:getContributor()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (I)org.eclipse.core.net.proxy.IProxyData:getType()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setLastModifiedTime(long)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Set:iterator()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:cancel() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:cancel()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (O)org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob() (O)org.eclipse.ecf.filetransfer.FileTransferJob:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:getAttribute(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)java.lang.Class:newInstance()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (I)org.osgi.framework.ServiceReference:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (O)org.eclipse.ecf.filetransfer.FileTransferJob:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (O)org.eclipse.ecf.provider.filetransfer.events.socket.SocketClosedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:skip(long) (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:logError(java.lang.String,java.io.IOException)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (O)java.net.ProtocolException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (M)java.net.URI:getScheme()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setCloseOutputStream(boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttributeKeys() (I)java.util.List:iterator()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (M)java.lang.StringBuffer:append(boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getDecompressedStream() (O)java.util.zip.GZIPInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:getName() (M)java.io.File:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$Compression:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.List:get(int)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (M)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (I)java.util.Set:add(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (M)java.net.URLConnection:getHeaderFields()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:connect(java.net.SocketAddress) (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:sendBrowseRequest() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:schedule()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:equals(java.lang.Object) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.HttpURLConnection:connect()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.Proxy:getType()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (M)java.lang.Thread:interrupt()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob) (O)java.io.FileOutputStream:<init>(java.io.File)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireReceiveResumedEvent() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (O)java.net.ConnectException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser$UrlConnectionAuthenticator:getPasswordAuthentication() (O)java.net.PasswordAuthentication:<init>(java.lang.String,char[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (M)java.lang.Class:isInstance(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:getName() (M)java.lang.String:lastIndexOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getSoTimeout() (M)java.net.Socket:getSoTimeout()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getDecompressedStream() (M)java.net.URLConnection:getInputStream()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDataEvent()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getConnectTimeout() (M)java.lang.Integer:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (M)java.net.URL:getPath()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:getContentLength()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.provider.filetransfer.Messages:<clinit>() (S)org.eclipse.osgi.util.NLS:initializeMessages(java.lang.String,java.lang.Class)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)java.net.URLConnection:getLastModified()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:setProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.core.runtime.jobs.Job:schedule()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (I)java.util.Set:iterator()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setTcpNoDelay(boolean) (M)java.net.Socket:setTcpNoDelay(boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getPercentComplete() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getFileLength()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Map:keySet()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:sendBrowseRequest() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:createRemoteFileSystemRequest()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read() (M)java.io.InputStream:read()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupProxies()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetryAttempts() (O)java.lang.Integer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (I)org.eclipse.ecf.internal.provider.filetransfer.IURLConnectionModifier:init(org.osgi.framework.BundleContext)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getAdapter(java.lang.Class) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitForRead() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:growBuffer()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isConnected()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:length()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IContributor:getName()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)java.util.List:iterator()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:runRequest() (M)java.io.File:isDirectory()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (I)org.eclipse.ecf.filetransfer.IFileRangeSpecification:getEndPosition()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitUntilClosed() (M)java.lang.Object:notify()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (I)org.eclipse.ecf.filetransfer.IFileRangeSpecification:getStartPosition()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:setUseCaches(boolean)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFileNameOnly() (M)java.net.URL:getPath()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Iterator:remove()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getLocalPort() (M)java.net.Socket:getLocalPort()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetrieveNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:logError(java.lang.String,java.io.IOException) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (O)org.eclipse.core.runtime.OperationCanceledException:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURI()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:runThread() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitUntilClosed()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getLocalAddress() (M)java.net.Socket:getLocalAddress()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setKeepAlive(boolean) (M)java.net.Socket:setKeepAlive(boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:createJobName() (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setFileLength(long)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:length()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransferPriority(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getPriority()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getOOBInline() (M)java.net.Socket:getOOBInline()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceGetName() (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:connect(java.net.SocketAddress,int) (M)java.net.Socket:connect(java.net.SocketAddress,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)java.net.URL:getPath()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:readPendingInput() (M)java.io.InputStream:available()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getName()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (I)java.util.Set:toArray(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:<init>() (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDataEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setCompressionRequestHeader() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:targetHasGzSuffix(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.lang.String:valueOf(int)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:isDirectory()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getSoLinger() (M)java.net.Socket:getSoLinger()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:setProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:openConnection(java.net.URL) (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireReceiveStartEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)java.net.URL:getPath()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (O)java.lang.Integer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFile()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getAttributes()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getLogService()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable,int,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (I)org.eclipse.core.runtime.IPath:lastSegment()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:checkError()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (O)org.eclipse.ecf.provider.filetransfer.events.socket.SocketClosedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)java.io.File:exists()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:isHTTP() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtension:getConfigurationElements()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRangeHeader(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (M)org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.net.URL)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:getName() (M)java.lang.String:substring(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (O)org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:createJobName() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URLConnection:setRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URL) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IExtension:getContributor()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransfer(java.lang.String) (I)org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory:newInstance()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)java.util.Properties:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:getAttribute(java.lang.String) (M)java.lang.Boolean:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.io.InputStream:close()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long) (M)java.lang.Thread:setDaemon(boolean)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double) (O)java.text.DecimalFormat:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getName()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getName()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:cancel() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDoneEvent()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP11() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketReadTimeout() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getOptions()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser) (O)org.eclipse.core.runtime.jobs.Job:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBundle() (I)org.osgi.framework.BundleContext:getBundle()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getLength()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URI:compareTo(java.net.URI)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:read() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String) (M)java.io.File:canRead()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setOOBInline(boolean) (M)java.net.Socket:setOOBInline(boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:newUserCancelledException() (O)org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyData:getUserId()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:sendUrgentData(int) (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.net.URLConnection:getHeaderField(int)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceCompareTo(org.eclipse.ecf.core.identity.BaseID) (M)java.lang.String:compareTo(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:<clinit>() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:skip(long) (O)java.io.InterruptedIOException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getURI() (O)java.net.URI:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.net.Socket:connect(java.net.SocketAddress,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:hardClose() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)java.util.Properties:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapterFactory:<init>() (O)org.eclipse.ecf.core.AbstractContainerAdapterFactory:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getOutgoingNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:readUntilDone() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitForRead()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFilename() (M)org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFileNameOnly()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupTimeouts() (S)java.lang.System:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getURL() (M)java.net.URI:toURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isConnected()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:beginTask(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getInputStream() (M)java.net.Socket:getInputStream()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IExtensionRegistry:addRegistryChangeListener(org.eclipse.core.runtime.IRegistryChangeListener)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketClosedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket) (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP() (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getAdapter(java.lang.Class) (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP11()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:isHTTP() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (I)org.eclipse.core.runtime.IPath:segmentCount()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:sendUrgentData(int) (M)java.net.Socket:sendUrgentData(int)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:isHTTP() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getOutputStream() (M)java.net.Socket:getOutputStream()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:toString() (M)java.net.Socket:toString()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:available() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:checkError()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getLogService() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransfer(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getURLConnectionModifier()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob) (O)java.io.BufferedOutputStream:<init>(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (M)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:dispose()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:isCanceled()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isDone()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:setTaskName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireSendStartEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.eclipse.core.runtime.IStatus:getException()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (S)org.eclipse.core.runtime.Path:fromPortableString(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (I)java.util.Set:toArray(java.lang.Object[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:fireReceiveResumedEvent()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.List:size()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (I)org.eclipse.ecf.internal.provider.filetransfer.IURLConnectionModifier:setSocketFactoryForConnection(java.net.URLConnection)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:shutdownInput() (M)java.net.Socket:shutdownInput()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setException(java.lang.Exception)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.Proxy:hasCredentials()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:connect(java.net.SocketAddress) (M)java.net.Socket:connect(java.net.SocketAddress)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)java.io.OutputStream:write(byte[],int,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream$1:<init>(org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceEquals(org.eclipse.ecf.core.identity.BaseID) (M)java.net.URL:equals(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:resetDoneAndException() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDone(boolean)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:read(byte[],int,int) (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getInfo()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getLogService() (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireReceiveResumedEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (S)org.eclipse.core.runtime.Path:fromPortableString(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteLastModified() (O)java.util.Date:<init>(long)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (S)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:readPendingInput() (M)java.io.InputStream:read(byte[],int,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Iterator:remove()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:done()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:resume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:doResume()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:resetDoneAndException()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getInfo() (O)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)java.net.URL:getPath()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toString() (M)org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:toExternalForm()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (I)org.osgi.framework.ServiceRegistration:unregister()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:setProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getSocketReadTimeout()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (M)java.io.InputStream:close()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isPaused()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:isDirectory() (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (I)org.eclipse.ecf.internal.provider.filetransfer.IURLConnectionModifier:dispose()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (O)java.io.FileInputStream:<init>(java.io.File)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:<clinit>() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (M)java.lang.Thread:interrupt()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (S)org.eclipse.ecf.filetransfer.identity.FileIDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketReadTimeout() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.io.InputStream:read(byte[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:trim()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doPause() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isPaused()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)java.net.URL:openConnection()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry() (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (I)org.eclipse.core.net.proxy.IProxyData:getType()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getDecompressedStream()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream$1:run() (M)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:runThread()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:cleanUp()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFileSize()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.Math:round(double)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (S)java.lang.Thread:currentThread()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (O)java.util.StringTokenizer:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long,boolean) (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransfer(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getFactory()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read(byte[],int,int) (M)java.io.InputStream:read(byte[],int,int)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:isConnected() (M)java.net.Socket:isConnected()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (I)org.osgi.service.log.LogService:log(int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault() (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:fireTransferReceiveDoneEvent()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.net.InetSocketAddress:toString()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyData:getPassword()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,boolean) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:canceling() (I)org.eclipse.ecf.filetransfer.IRemoteFileSystemRequest:cancel()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (O)java.io.BufferedInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (O)org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:getAttribute(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)org.eclipse.ecf.provider.filetransfer.events.socket.SocketConnectedEvent:getSocket()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IContributor:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.io.InputStream:read(byte[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getLogService() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetryAttempts() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getOptions()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:isSchemeRegistered(java.lang.String,java.lang.String[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob() (M)org.eclipse.ecf.filetransfer.FileTransferJob:setFileTransferRunnable(org.eclipse.ecf.filetransfer.IFileTransferRunnable)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getLastModified()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read() (O)java.io.InterruptedIOException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDoneEvent()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.ISendFileTransferContainerAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:isDirectory() (M)java.lang.String:endsWith(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:reinitialize() (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getOutgoingNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:skip(long) (M)java.io.InputStream:skip(long)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURI()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapterFactory:<init>() (O)org.eclipse.ecf.core.AbstractContainerAdapterFactory:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getFileTransfer(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransferPriority(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getPriority()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getFileTransferInfo()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IRegistryChangeEvent:getExtensionDeltas(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues() (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetrieveNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (M)java.io.OutputStream:close()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapterFactory:<init>() (O)org.eclipse.ecf.core.AbstractContainerAdapterFactory:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (M)java.lang.StringBuffer:append(boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceHashCode() (M)java.net.URL:hashCode()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (M)java.lang.StringBuilder:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyData:getType()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (M)java.net.URL:getPort()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyData:getHost()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDoneEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.SendFileTransferException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)java.util.HashMap:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:<init>(long,long,org.eclipse.ecf.filetransfer.identity.IFileID)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketConnectedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket) (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext) (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setConnectContextForAuthentication(org.eclipse.ecf.core.security.IConnectContext)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getFinalStatus(java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.lang.StringBuilder:append(long)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)java.io.BufferedInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (M)java.io.IOException:getMessage()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.io.InputStream:close()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:compareTo(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URI:getScheme()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireSendStartEvent() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (I)org.eclipse.ecf.core.security.CallbackHandler:handle(org.eclipse.ecf.core.security.Callback[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (I)org.eclipse.ecf.filetransfer.IFileRangeSpecification:getEndPosition()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:<init>() (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$1:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (O)java.util.HashSet:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:toString() (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFileSize()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (O)org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$2:newInstance() (O)org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.Proxy:getUsername()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isDone()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (O)org.eclipse.ecf.core.util.Proxy:<init>(org.eclipse.ecf.core.util.Proxy$Type,org.eclipse.ecf.core.util.ProxyAddress,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getOutputStream() (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:getLength() (M)java.io.File:length()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.IRetrieveFileTransferContainerAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getFinalStatus(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDoneEvent() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.core.identity.IDCreateException:<init>(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getID()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneCanceled() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:newUserCancelledException()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:sendBrowseRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getInputStream() (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:checkCancel()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$UrlConnectionAuthenticator:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:getException() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getException()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketCloseTimeout() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupTimeouts()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String) (M)java.lang.Boolean:toString()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URL)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:<clinit>() (O)java.util.ArrayList:<init>(java.util.Collection)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (O)org.eclipse.ecf.provider.filetransfer.events.socket.SocketCreatedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:hardClose() (M)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:dispose()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:newUserCancelledException() (O)org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:worked(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDoneEvent() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:cancel() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:cancel()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (I)org.eclipse.core.runtime.IExtensionRegistry:removeRegistryChangeListener(org.eclipse.core.runtime.IRegistryChangeListener)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:logError(java.lang.String,java.io.IOException) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (M)java.io.InputStream:close()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)java.net.URI:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (O)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:<init>(java.net.Socket,org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.lang.String:length()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDataEvent()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:<init>(java.net.Socket,org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket[]) (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:<init>(java.net.Socket)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.Math:round(double)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:isSameFactorySocket(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:getFactorySocket()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)java.net.URLConnection:setUseCaches(boolean)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:<init>(java.lang.Object,int,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransfer(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (I)java.util.Iterator:next()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Set:iterator()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getBrowseNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.String:substring(int)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setCompressionRequestHeader() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)org.eclipse.ecf.filetransfer.events.socket.ISocketEvent:getSource()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:wrapTransferReadInputStream(java.io.InputStream,org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (I)org.eclipse.core.runtime.IExtension:getContributor()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String) (I)org.osgi.framework.BundleContext:registerService(java.lang.String,java.lang.Object,java.util.Dictionary)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFileNameOnly() (M)java.lang.String:substring(int)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy) (O)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getRetrieveFileTransferPriority(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getPriority()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:createJobName()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:createInstance(java.lang.Object[]) (O)org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (M)java.lang.Thread:join(long)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (O)java.io.InterruptedIOException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (M)java.io.OutputStream:close()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceivePausedEvent() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$2:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getSendBufferSize() (M)java.net.Socket:getSendBufferSize()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitForRead() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:isBufferFull()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:openConnection(java.net.URL) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (M)java.lang.Object:wait(long)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (O)org.eclipse.ecf.core.security.UnsupportedCallbackException:<init>(org.eclipse.ecf.core.security.Callback,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getKeepAlive() (M)java.net.Socket:getKeepAlive()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (O)java.util.HashMap:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:close() (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:checkCancellation()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setReuseAddress(boolean) (M)java.net.Socket:setReuseAddress(boolean)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:<init>(java.io.InputStream,int,org.eclipse.core.runtime.IProgressMonitor) (O)java.io.FilterInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read(byte[],int,int) (O)org.eclipse.core.runtime.OperationCanceledException:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:read() (M)java.lang.Object:notify()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:dispose() (M)java.util.Properties:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getFileTransfer(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireReceiveStartEvent() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (I)org.eclipse.ecf.core.security.IConnectContext:getCallbackHandler()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setCompressionRequestHeader() (M)java.net.URLConnection:setRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:isSchemeRegistered(java.lang.String,java.lang.String[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (O)java.net.URL:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (M)java.io.File:toURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.lang.String:length()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setTrafficClass(int) (M)java.net.Socket:setTrafficClass(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)java.net.URLConnection:getInputStream()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:getFileNameOnly() (M)java.lang.String:lastIndexOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<clinit>() (O)java.lang.Integer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:<init>(java.net.Socket) (O)java.net.Socket:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketEvent) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:getSocket()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.System:currentTimeMillis()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (O)org.eclipse.ecf.filetransfer.RemoteFileSystemException:<init>(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:<init>(java.io.File) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getSendFileTransfer(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean) (O)java.io.BufferedOutputStream:<init>(java.io.OutputStream)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Set:iterator()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (O)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$1:<init>(org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:<init>(long,long,org.eclipse.ecf.filetransfer.identity.IFileID) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitForRead() (M)java.lang.Object:wait(long)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (I)org.eclipse.core.runtime.IContributor:getName()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (M)java.lang.String:indexOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (I)org.eclipse.ecf.core.security.CallbackHandler:handle(org.eclipse.ecf.core.security.Callback[])
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:checkCancellation() (I)org.eclipse.core.runtime.IProgressMonitor:isCanceled()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getCompressionResponseHeader() (M)java.net.URLConnection:getContentEncoding()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketReadTimeout() (O)java.lang.Integer:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransfer(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getFactory()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResumeResponseHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isConnected()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:cancel() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneCanceled()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketCloseTimeout() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getOptions()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDataEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URL) (O)org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$2:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (M)java.net.URLConnection:getURL()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (I)org.eclipse.ecf.filetransfer.IFileTransferInfo:getFile()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (S)java.lang.Thread:currentThread()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketReadTimeout() (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.OutputStream) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (M)org.eclipse.ecf.core.security.ObjectCallback:getObject()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:skip(long) (S)java.lang.Math:min(long,long)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeSendFileTransferFactory(java.lang.String) (I)java.util.Map:keySet()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (M)java.net.URL:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRangeHeader(java.lang.String) (M)java.net.URLConnection:setRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:cancel() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isPaused()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getConnectTimeout() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getOptions()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURI()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:runRequest()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (I)org.eclipse.ecf.internal.provider.filetransfer.IURLConnectionModifier:setSocketFactoryForConnection(java.net.URLConnection)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRangeHeader(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyService:isProxiesEnabled()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:createRemoteFileEvent()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$Compression:<clinit>() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$Compression:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setSoTimeout(int) (M)java.net.Socket:setSoTimeout(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.ecf.filetransfer.UserCancelledException:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:isInputShutdown() (M)java.net.Socket:isInputShutdown()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:runThread() (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:readUntilDone()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:runThread() (M)java.lang.Object:notify()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getRetrieveNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String) (M)java.util.Hashtable:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetryAttempts() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$2:<init>(org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper) (O)java.net.Authenticator:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (I)org.eclipse.core.runtime.IPath:lastSegment()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (I)org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory:createSocket()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:getEventName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setInputStream(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setInputStream(java.io.InputStream) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketReadTimeout()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketCreatedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket) (O)org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:<init>(java.io.InputStream,int,org.eclipse.core.runtime.IProgressMonitor,java.lang.String,java.lang.String) (O)java.io.FilterInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:beginTask(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$1:<init>(org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper,java.lang.String,java.lang.String) (O)java.net.Authenticator:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:<init>(long,long,org.eclipse.ecf.filetransfer.identity.IFileID) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.net.URLConnection:setRequestProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (S)java.lang.System:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:<init>(java.io.File) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (S)java.lang.Class:forName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (I)org.eclipse.ecf.filetransfer.IRemoteFileSystemBrowserContainerAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:isDirectory()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$2:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long) (O)org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream$1:<init>(org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:toString() (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (I)java.util.Map:clear()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:compareTo(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getFileTransfer(java.lang.String) (I)org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory:newInstance()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (O)org.eclipse.ecf.core.util.ProxyAddress:<init>(java.lang.String,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDoneEvent() (I)org.eclipse.ecf.filetransfer.IFileTransferListener:handleTransferEvent(org.eclipse.ecf.filetransfer.events.IFileTransferEvent)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (O)java.io.InterruptedIOException:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:getAttributeKeys()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (M)java.net.URL:toExternalForm()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (M)java.net.URL:getHost()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:runRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:<init>(java.io.File)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveFileTransferFactory(java.lang.String) (I)java.util.Set:iterator()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getDecompressedStream() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getLength()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitForRead() (M)java.lang.Object:wait()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getCompressionResponseHeader() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:targetHasGzSuffix(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$DirectoryJob:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:newUserCancelledException()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:stop(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getExtensionRegistry()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getDeclaringExtension()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile) (O)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:<init>(java.io.File)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:fireTransferReceiveDataEvent() (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getFileTransfer(java.lang.String) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:getFactory()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:receive(java.io.OutputStream,org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setCloseOutputStream(boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean) (M)java.io.File:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtensionDelta:getKind()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getPort() (M)java.net.Socket:getPort()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventSource:addListener(org.eclipse.ecf.filetransfer.events.socket.ISocketListener) (I)java.util.List:add(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (M)java.io.InputStream:close()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile$1:getLastModified() (M)java.io.File:lastModified()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:isSchemeRegistered(java.lang.String,java.lang.String[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireSendStartEvent()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)java.lang.StringBuffer:append(boolean)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (O)java.lang.StringBuilder:<init>()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceGetName() (M)java.net.URI:toASCIIString()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:isBound() (M)java.net.Socket:isBound()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URI:getScheme()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:wrapTransferReadInputStream(java.io.InputStream,org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:<init>(java.io.InputStream,int,org.eclipse.core.runtime.IProgressMonitor,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob() (M)org.eclipse.ecf.filetransfer.FileTransferJob:setFileTransfer(org.eclipse.ecf.filetransfer.IFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getConnectTimeout() (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:fireReceiveStartEvent()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.io.OutputStream:write(byte[],int,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:wrapTransferReadInputStream(java.io.InputStream,org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetryAttempts()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:waitUntilClosed() (M)java.lang.Object:wait()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneCanceled() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneCanceled(java.lang.Exception)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getConnectTimeout()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setInputStream(java.io.InputStream) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getSocketCloseTimeout()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.ProxyAddress:getPort()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doPause() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isConnected()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:hashCode() (M)java.lang.Object:hashCode()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long) (O)java.io.FilterInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getReceiveBufferSize() (M)java.net.Socket:getReceiveBufferSize()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (I)org.eclipse.core.net.proxy.IProxyService:select(java.net.URI)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:getName() (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:createExecutableExtension(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (M)org.eclipse.ecf.core.security.NameCallback:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getRetrieveNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (M)java.lang.String:substring(int,int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:openStreams()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (I)org.eclipse.core.runtime.IExtensionDelta:getExtension()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:<init>(java.lang.Object,int,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:isHTTP()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:bind(java.net.SocketAddress) (M)java.net.Socket:bind(java.net.SocketAddress)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getBrowseNamespace() (I)org.eclipse.ecf.core.identity.IIDFactory:getNamespaceByName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:isClosed() (M)java.net.Socket:isClosed()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValuesFromOptions() (I)java.util.Iterator:next()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (S)java.lang.Integer:getInteger(java.lang.String,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getRetrieveFileTransferPriority(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuffer:append(char)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IExtension:getContributor()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (M)java.net.URLConnection:getOutputStream()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createRangeName()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (O)org.eclipse.ecf.provider.filetransfer.events.socket.SocketConnectedEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:createRemoteFileSystemRequest() (O)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$1:<init>(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser,org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (M)org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getScheme()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransfer(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)java.io.FileOutputStream:<init>(java.io.File)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapterFactory:getContainerAdapter(org.eclipse.ecf.core.IContainer,java.lang.Class) (M)java.lang.Object:equals(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper$1:getPasswordAuthentication() (O)java.net.PasswordAuthentication:<init>(java.lang.String,char[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:shutdownOutput() (M)java.net.Socket:shutdownOutput()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:done()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:read(byte[],int,int) (O)org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:checkCancellation()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (O)org.eclipse.ecf.filetransfer.BrowseFileTransferException:<init>(java.lang.String,java.lang.Throwable,int)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:<init>() (O)org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (S)java.lang.Integer:getInteger(java.lang.String,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPlatformSupportedSchemes() (I)java.util.Set:add(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,java.lang.Throwable,int,java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDone(boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:isHTTP() (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (O)java.net.URI:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getInfo()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:loadProtocolHandlers() (I)org.eclipse.core.runtime.IExtensionRegistry:getExtensionPoint(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:createExecutableExtension(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getBrowseFileTransfer(java.lang.String) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (I)org.eclipse.ecf.filetransfer.IFileRangeSpecification:getStartPosition()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (I)org.eclipse.ecf.filetransfer.IRemoteFileSystemBrowserContainerAdapter:setProxy(org.eclipse.ecf.core.util.Proxy)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator$ProtocolFactory:compareTo(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (M)java.lang.StringBuffer:append(long)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:toString() (M)java.lang.StringBuffer:append(boolean)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getBundle()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer$UrlConnectionAuthenticator:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer) (O)java.net.Authenticator:<init>()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getLocalSocketAddress() (M)java.net.Socket:getLocalSocketAddress()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setCanceled(java.lang.Exception) (M)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:newUserCancelledException()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (M)java.lang.Class:isInstance(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (I)org.eclipse.core.runtime.IProgressMonitor:worked(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getRemoteFileURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (O)org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (I)org.eclipse.ecf.filetransfer.IRemoteFileInfo:getLastModified()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (I)org.osgi.framework.BundleContext:registerService(java.lang.String,java.lang.Object,java.util.Dictionary)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:setSoLinger(boolean,int) (M)java.net.Socket:setSoLinger(boolean,int)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.filetransfer.FileTransferJob:setFileTransferRunnable(org.eclipse.ecf.filetransfer.IFileTransferRunnable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:doResume() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$3:getException() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getException()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Iterator:remove()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:cancel() (M)org.eclipse.core.runtime.jobs.Job:cancel()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins() (O)java.util.StringTokenizer:<init>(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupAndScheduleJob(org.eclipse.ecf.filetransfer.FileTransferJob) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:getAttribute(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDoneEvent()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$4:<init>(org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String) (I)java.util.List:contains(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.lang.String:startsWith(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.System:currentTimeMillis()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (O)org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (M)java.net.URL:toString()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getRetrieveFileTransferFactoryId(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupAndScheduleJob() (M)org.eclipse.core.runtime.jobs.Job:schedule()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:removeBrowseFileTransferFactory(java.lang.String) (I)java.util.Map:keySet()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:namespaceHashCode() (M)java.net.URI:hashCode()
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String) (M)java.util.StringTokenizer:nextToken()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (O)java.lang.Integer:<init>(int)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:getTrafficClass() (M)java.net.Socket:getTrafficClass()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (M)org.eclipse.ecf.core.util.ProxyAddress:getHostName()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:<init>(java.io.InputStream,int,long,long) (O)java.lang.Thread:<init>(java.lang.Runnable,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (M)java.net.URL:toString()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getAdapter(java.lang.Class) (O)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$4:toString() (M)java.lang.StringBuffer:append(boolean)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (O)org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser$UrlConnectionAuthenticator:<init>(org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:fireTransferSendDataEvent() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$3:<init>(org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)java.io.File:<init>(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile$1:isDirectory() (I)org.eclipse.ecf.filetransfer.identity.IFileID:getURL()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$5:toString() (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:isDone()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:read(byte[],int,int) (M)java.lang.Object:notify()
M:org.eclipse.ecf.internal.provider.filetransfer.Messages:<init>() (O)org.eclipse.osgi.util.NLS:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:dispose() (S)java.lang.System:getProperties()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getAdapter(java.lang.Class) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)java.net.URL:getProtocol()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:getAttribute(java.lang.String) (M)java.io.File:canWrite()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getAdapter(java.lang.Class) (I)org.eclipse.core.runtime.IAdapterManager:loadAdapter(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (I)org.eclipse.ecf.core.security.IConnectContext:getCallbackHandler()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$2:<init>(org.eclipse.ecf.internal.provider.filetransfer.Activator) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:close() (M)java.net.Socket:close()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:registerScheme(java.lang.String) (O)java.util.Hashtable:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (O)org.eclipse.ecf.filetransfer.IncomingFileTransferException:<init>(java.lang.String,int,java.util.Map)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins() (M)java.util.StringTokenizer:countTokens()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (M)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getFileRangeSpecification()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.lang.System:getProperties()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setDoneException(java.lang.Exception)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:readUntilDone() (M)java.io.InputStream:read(byte[],int,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (I)org.eclipse.core.runtime.IConfigurationElement:createExecutableExtension(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (O)org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:getFileTransfer(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (I)org.eclipse.core.runtime.IPath:segmentCount()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (M)org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:getFileTransferInfo()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (M)java.lang.String:equalsIgnoreCase(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean) (O)java.io.FileOutputStream:<init>(java.lang.String,boolean)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:<init>() (O)org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$6:receive(java.io.File,org.eclipse.ecf.filetransfer.FileTransferJob,boolean) (M)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setOutputStream(java.io.OutputStream)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (M)org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (O)java.io.FileInputStream:<init>(java.io.File)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (O)java.io.InterruptedIOException:<init>()
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:logError(java.lang.String,java.io.IOException) (O)org.eclipse.core.runtime.Status:<init>(int,java.lang.String,int,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (M)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket() (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (M)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.Socket,java.lang.String,int,boolean) (M)javax.net.ssl.SSLSocketFactory:createSocket(java.net.Socket,java.lang.String,int,boolean)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.X509Certificate:verify(java.security.PublicKey)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:stop(org.osgi.framework.BundleContext) (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getDefaultCipherSuites() (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int,int,java.net.InetAddress) (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int) (M)javax.net.ssl.SSLSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (O)java.security.SecureRandom:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) (O)org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.CertificateException:initCause(java.lang.Throwable)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.CertificateException:initCause(java.lang.Throwable)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSupportedCipherSuites() (M)javax.net.ssl.SSLSocketFactory:getSupportedCipherSuites()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:start(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLContext(java.lang.String) (S)org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (O)java.io.IOException:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) (O)java.lang.UnsupportedOperationException:<init>(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:start(org.osgi.framework.BundleContext) (I)org.osgi.framework.BundleContext:registerService(java.lang.String,java.lang.Object,java.util.Dictionary)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (M)java.lang.String:trim()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (M)javax.net.ssl.SSLContext:init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int,int) (M)javax.net.ssl.SSLServerSocketFactory:createServerSocket(int,int)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:<init>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (I)java.security.Principal:equals(java.lang.Object)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getDefaultCipherSuites() (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.X509Certificate:getPublicKey()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.Socket,java.lang.String,int,boolean) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (M)java.lang.String:split(java.lang.String)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (I)java.util.Iterator:next()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (O)org.eclipse.ecf.internal.ssl.ECFTrustManager:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.X509Certificate:getSubjectDN()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:<init>()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSupportedCipherSuites() (M)javax.net.ssl.SSLServerSocketFactory:getSupportedCipherSuites()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (M)java.io.IOException:initCause(java.lang.Throwable)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) (O)org.eclipse.ecf.internal.ssl.ECFCertificateException:<init>(java.lang.String,java.security.cert.X509Certificate[],java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (S)javax.net.ssl.SSLServerSocketFactory:getDefault()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int) (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.lang.String,int) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.lang.String,int) (M)javax.net.ssl.SSLSocketFactory:createSocket(java.lang.String,int)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (M)javax.net.ssl.SSLContext:getServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.InetAddress,int) (M)javax.net.ssl.SSLSocketFactory:createSocket(java.net.InetAddress,int)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSupportedCipherSuites() (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (M)java.io.IOException:initCause(java.lang.Throwable)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (M)org.osgi.util.tracker.ServiceTracker:getServices()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.InetAddress,int,java.net.InetAddress,int) (M)javax.net.ssl.SSLSocketFactory:createSocket(java.net.InetAddress,int)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (I)java.util.List:iterator()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (I)java.util.List:add(java.lang.Object)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:<init>() (O)javax.net.ssl.SSLServerSocketFactory:<init>()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:<init>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (O)java.io.IOException:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:start(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (M)java.lang.Class:getName()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:stop(org.osgi.framework.BundleContext) (I)org.osgi.framework.ServiceRegistration:unregister()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) (O)org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (O)java.util.ArrayList:<init>()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int,int) (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (M)java.security.cert.X509Certificate:getIssuerDN()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getDefaultCipherSuites() (M)javax.net.ssl.SSLSocketFactory:getDefaultCipherSuites()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (M)javax.net.ssl.SSLContext:getSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.lang.String,int,java.net.InetAddress,int) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLContext(java.lang.String) (S)org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int) (M)javax.net.ssl.SSLServerSocketFactory:createServerSocket(int)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:<init>() (O)javax.net.ssl.SSLSocketFactory:<init>()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:verify(java.security.cert.X509Certificate[],java.lang.String) (O)org.eclipse.ecf.internal.ssl.ECFCertificateException:<init>(java.lang.String,java.security.cert.X509Certificate[],java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) (M)org.eclipse.osgi.service.security.TrustEngine:findTrustAnchor(java.security.cert.Certificate[])
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (I)java.util.List:contains(java.lang.Object)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getDefaultCipherSuites() (M)javax.net.ssl.SSLServerSocketFactory:getDefaultCipherSuites()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (S)javax.net.ssl.SSLSocketFactory:getDefault()
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (S)javax.net.ssl.SSLContext:getInstance(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket(java.net.InetAddress,int) (O)org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSupportedCipherSuites() (O)org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory()
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:createServerSocket(int,int,java.net.InetAddress) (M)javax.net.ssl.SSLServerSocketFactory:createServerSocket(int,int,java.net.InetAddress)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:createSocket() (M)javax.net.ssl.SSLSocketFactory:createSocket()
M:org.eclipse.ecf.internal.ssl.ECFCertificateException:<init>(java.lang.String,java.security.cert.X509Certificate[],java.lang.String) (O)java.security.cert.CertificateException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:isAssignableFrom(java.lang.Class,java.lang.Class) (M)java.lang.Class:isPrimitive()
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerEjectedEvent:getLocalContainerID()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (M)org.eclipse.ecf.core.events.ContainerDisconnectingEvent:getLocalContainerID()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeChar(int) (M)java.io.ObjectOutputStream:writeChar(int)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (O)java.lang.ClassNotFoundException:<init>(java.lang.String)
M:org.eclipse.ecf.core.security.ConnectContextFactory:createUsernamePasswordConnectContext(java.lang.String,java.lang.Object) (O)org.eclipse.ecf.core.security.ConnectContextFactory$1:<init>(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.security.ConnectContextFactory$1$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.ObjectCallback:setObject(java.lang.Object)
M:org.eclipse.ecf.core.util.ProxyAddress:hashCode() (O)java.lang.Object:hashCode()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.security.PasswordCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.Class:newInstance()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readUnsignedByte() (M)java.io.ObjectInputStream:readUnsignedByte()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeUTF(java.lang.String) (M)java.io.ObjectOutputStream:writeUTF(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:<init>(org.osgi.framework.Bundle,java.io.InputStream,org.osgi.service.log.LogService) (O)java.io.ObjectInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.reflect.Field:setAccessible(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:trace(java.lang.String) (I)org.osgi.service.log.LogService:log(int,java.lang.String)
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.util.TreeSet:size()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID,java.io.Serializable) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Set:iterator()
M:org.eclipse.ecf.core.util.ConnectedContainerFilter:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:<init>(org.osgi.framework.Bundle,java.io.InputStream) (O)org.eclipse.ecf.core.util.OSGIObjectInputStream:<init>(org.osgi.framework.Bundle,java.io.InputStream,org.osgi.service.log.LogService)
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerEjectedEvent:getReason()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.equinox.concurrent.future.AbstractFuture:getProgressMonitor()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readUTF() (M)java.io.ObjectInputStream:readUTF()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readBoolean()
M:org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean) (O)org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean,org.eclipse.core.runtime.jobs.ISchedulingRule)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (S)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readDouble()
M:org.eclipse.ecf.core.util.ProxyAddress:<init>(java.lang.String,int) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:getClassResolver() (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (M)java.io.ObjectStreamClass:getName()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.reflect.Field:getModifiers()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<clinit>() (M)java.util.HashMap:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.security.ConnectContextFactory:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.Exception:getMessage()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)java.io.ObjectOutputStream:writeObject(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream) (O)org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream,boolean,org.osgi.service.log.LogService)
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.ContainerManagerTracker:getContainerManager() (M)org.eclipse.ecf.core.util.ContainerManagerTracker:getService()
M:org.eclipse.ecf.core.util.Proxy:equals(java.lang.Object) (M)org.eclipse.ecf.core.util.Proxy:getType()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.equinox.concurrent.future.AbstractFuture:isCanceled()
M:org.eclipse.ecf.core.util.Proxy:toString() (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.core.runtime.jobs.Job:schedule(long)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (M)java.io.ObjectOutputStream:writeObject(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Byte:byteValue()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeChar(int)
M:org.eclipse.ecf.core.security.BooleanCallback:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (I)java.util.Set:add(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.ContainerFactoryTracker:getContainerFactory() (M)org.eclipse.ecf.core.util.ContainerFactoryTracker:getService()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Iterator:next()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeByte(int)
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.ProxyAddress:hashCode() (S)java.lang.Math:abs(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.Class:getDeclaredFields()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<clinit>() (O)java.util.HashMap:<init>(int,float)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.List:iterator()
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readChar()
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Object:getClass()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFloat(float) (M)java.io.ObjectOutputStream:writeFloat(float)
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:toString() (M)org.eclipse.ecf.core.events.ContainerDisposeEvent:getLocalContainerID()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeBoolean(boolean) (M)java.io.ObjectOutputStream:writeBoolean(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)java.util.HashSet:<init>(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.security.PassphraseCallback:<init>(java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.Exception:getStackTrace()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeShort(int) (M)java.io.ObjectOutputStream:writeShort(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:<clinit>() (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Enumeration:hasMoreElements()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.Class:getDeclaredConstructor(java.lang.Class[])
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Character:charValue()
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Class:getComponentType()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Integer:intValue()
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerConnectedEvent:getLocalContainerID()
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (M)org.eclipse.ecf.core.events.ContainerDisconnectingEvent:getTargetID()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.Proxy:toString() (M)org.eclipse.ecf.core.util.Proxy:getType()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:getClassResolver() (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.util.Proxy:<init>(org.eclipse.ecf.core.util.Proxy$Type,org.eclipse.ecf.core.util.ProxyAddress) (O)org.eclipse.ecf.core.util.Proxy:<init>(org.eclipse.ecf.core.util.Proxy$Type,org.eclipse.ecf.core.util.ProxyAddress,java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:close() (M)java.io.ObjectOutputStream:close()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.reflect.Field:getModifiers()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Float:valueOf(float)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Boolean:booleanValue()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:isAssignableFrom(java.lang.Class,java.lang.Class)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)org.osgi.util.tracker.ServiceTracker:close()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.reflect.Method:getName()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.reflect.Constructor:setAccessible(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)java.io.ObjectInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (O)java.lang.NoSuchMethodException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:getClassForType(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeInt(int) (M)java.io.ObjectOutputStream:writeInt(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:isAssignableFrom(java.lang.Class,java.lang.Class) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.lang.String) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,org.osgi.framework.Filter,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:<clinit>() (O)java.util.HashMap:<init>()
M:org.eclipse.ecf.core.security.ObjectCallback:<init>(java.lang.Object) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ProxyAddress:hashCode() (M)java.lang.String:hashCode()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Boolean:valueOf(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Map:get(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readShort()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:write(int) (M)java.io.ObjectOutputStream:write(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.security.UnsupportedCallbackException:<init>(org.eclipse.ecf.core.security.Callback,java.lang.String) (O)java.lang.Exception:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.util.Dictionary:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readLong() (M)java.io.ObjectInputStream:readLong()
M:org.eclipse.ecf.core.security.BooleanCallback:<init>(java.lang.String,boolean) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ConnectedContainerFilter:match(org.eclipse.ecf.core.IContainer) (I)org.eclipse.ecf.core.IContainer:getConnectedID()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:<init>(org.osgi.framework.Bundle,java.io.InputStream,org.osgi.service.log.LogService) (O)java.io.ObjectInputStream:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.io.ObjectOutputStream:writeInt(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readInt()
M:org.eclipse.ecf.core.security.ConnectContextFactory$1:<init>(java.lang.String,java.lang.Object) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ProxyAddress:<init>(java.lang.String) (O)org.eclipse.ecf.core.util.ProxyAddress:<init>(java.lang.String,int)
M:org.eclipse.ecf.core.security.PasswordCallback:<init>(java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.core.jobs.JobsExecutor:setChildProgressMonitor(org.eclipse.core.runtime.IProgressMonitor,org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (O)java.lang.ClassNotFoundException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeInt(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Enum:valueOf(java.lang.Class,java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:setChildProgressMonitor(org.eclipse.core.runtime.IProgressMonitor,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.equinox.concurrent.future.FutureProgressMonitor:setChildProgressMonitor(org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readUnsignedShort() (M)java.io.ObjectInputStream:readUnsignedShort()
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerDisconnectedEvent:getTargetID()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Collection:size()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Map:size()
M:org.eclipse.ecf.core.security.ConnectContextFactory$1$1:<init>(org.eclipse.ecf.core.security.ConnectContextFactory$1,java.lang.String,java.lang.Object) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object)
M:org.eclipse.ecf.core.security.ConnectContextFactory$1$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.PasswordCallback:setPassword(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.core.jobs.JobsExecutor:safeRun(org.eclipse.equinox.concurrent.future.ISafeProgressRunner,org.eclipse.equinox.concurrent.future.IProgressRunnable)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Long:longValue()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Short:valueOf(short)
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.io.ObjectInputStream:readUTF()
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerConnectedEvent:getTargetID()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class)
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.core.jobs.JobsExecutor:createFuture(org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:createJobName(java.lang.String,int,org.eclipse.equinox.concurrent.future.IProgressRunnable) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:close() (M)java.io.ObjectInputStream:close()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:get(java.lang.Object)
M:org.eclipse.ecf.core.util.Proxy$Type:<clinit>() (O)org.eclipse.ecf.core.util.Proxy$Type:<init>(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:flush() (M)java.io.ObjectOutputStream:flush()
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (I)org.osgi.framework.Bundle:getSymbolicName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Iterator:hasNext()
M:org.eclipse.ecf.core.util.Proxy:<init>(org.eclipse.ecf.core.util.Proxy$Type,org.eclipse.ecf.core.util.ProxyAddress,java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:isAssignableFrom(java.lang.Class,java.lang.Class) (M)java.lang.Class:isAssignableFrom(java.lang.Class)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readChar() (M)java.io.ObjectInputStream:readChar()
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream,boolean,org.osgi.service.log.LogService) (O)java.io.ObjectOutputStream:<init>()
M:org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.reflect.Field:set(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readLong()
M:org.eclipse.ecf.core.security.ConnectContextFactory$2$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.ObjectCallback:setObject(java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeFloat(float)
M:org.eclipse.ecf.core.util.ContainerManagerTracker:<init>(org.osgi.framework.BundleContext) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.security.ConnectContextFactory$1$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.NameCallback:setName(java.lang.String)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:getClassForType(java.lang.String) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)org.osgi.framework.Version:parseVersion(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil$MethodComparator:compare(java.lang.Object,java.lang.Object) (M)java.lang.reflect.Method:getParameterTypes()
M:org.eclipse.ecf.core.util.AdapterContainerFilter:<init>(java.lang.Class) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeBoolean(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Proxy:equals(java.lang.Object) (M)org.eclipse.ecf.core.util.Proxy:getAddress()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Byte:valueOf(byte)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.security.PassphraseCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.reflection.ClassUtil$MethodComparator:compare(java.lang.Object,java.lang.Object) (S)java.util.Arrays:equals(java.lang.Object[],java.lang.Object[])
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (S)java.lang.reflect.Modifier:isPublic(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Set:size()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (I)java.util.Map:put(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readObject()
M:org.eclipse.ecf.core.security.BooleanCallback:<init>(java.lang.String,boolean) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Enumeration:nextElement()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Integer:valueOf(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.core.jobs.JobsExecutor:createJobName(java.lang.String,int,org.eclipse.equinox.concurrent.future.IProgressRunnable) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.ProxyAddress:equals(java.lang.Object) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Proxy:toString() (M)org.eclipse.ecf.core.util.Proxy:getAddress()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.AdapterContainerFilter:match(org.eclipse.ecf.core.IContainer) (I)org.eclipse.ecf.core.IContainer:getAdapter(java.lang.Class)
M:org.eclipse.ecf.core.security.ConnectContextFactory$2:getCallbackHandler() (O)org.eclipse.ecf.core.security.ConnectContextFactory$2$1:<init>(org.eclipse.ecf.core.security.ConnectContextFactory$2,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.security.ConnectContextFactory$1$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.PassphraseCallback:setPassphrase(java.lang.String)
M:org.eclipse.ecf.core.util.Proxy:hashCode() (M)org.eclipse.ecf.core.util.ProxyAddress:hashCode()
M:org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeUTF(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)java.lang.Class:getFields()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)java.util.HashMap:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride()
M:org.eclipse.ecf.core.util.Proxy:toString() (O)java.lang.StringBuilder:<init>()
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeLong(long)
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)org.eclipse.ecf.core.events.ContainerConnectingEvent:getData()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFloat() (M)java.io.ObjectInputStream:readFloat()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeShort(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String) (S)java.lang.Class:forName(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.io.ObjectInputStream:readInt()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.Class:getDeclaredField(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.reflect.Array:newInstance(java.lang.Class,int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.reflect.Array:set(java.lang.Object,int,java.lang.Object)
M:org.eclipse.ecf.core.security.UnsupportedCallbackException:<init>(org.eclipse.ecf.core.security.Callback) (O)java.lang.Exception:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeSerializable(java.lang.Object,java.lang.Class) (M)java.io.ObjectOutputStream:writeObject(java.lang.Object)
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext) (O)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:skipBytes(int) (M)java.io.ObjectInputStream:skipBytes(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFully(byte[]) (M)java.io.ObjectInputStream:readFully(byte[])
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readFloat()
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.io.ObjectInputStream:readUTF()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:getClassForType(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Double:doubleValue()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:<init>(org.eclipse.ecf.core.jobs.JobsExecutor,java.lang.String,org.eclipse.equinox.concurrent.future.AbstractFuture,org.eclipse.equinox.concurrent.future.IProgressRunnable) (M)org.eclipse.ecf.core.jobs.JobsExecutor$1:setRule(org.eclipse.core.runtime.jobs.ISchedulingRule)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:getModifiers()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:getName()
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (O)java.io.NotSerializableException:<init>(java.lang.String)
M:org.eclipse.ecf.core.security.ConnectContextFactory$2$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.PassphraseCallback:setPassphrase(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean,org.eclipse.core.runtime.jobs.ISchedulingRule) (O)org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean,org.eclipse.core.runtime.jobs.ISchedulingRule,long)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (M)java.lang.Class:getMethod(java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:<init>(org.eclipse.ecf.core.identity.ID) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Class:isArray()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readUTF()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDouble(double) (M)java.io.ObjectOutputStream:writeDouble(double)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeChars(java.lang.String) (M)java.io.ObjectOutputStream:writeChars(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.io.ObjectOutputStream:writeDouble(double)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.String:intern()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:read() (M)java.io.ObjectInputStream:read()
M:org.eclipse.ecf.core.security.ConnectContextFactory:createPasswordConnectContext(java.lang.String) (O)org.eclipse.ecf.core.security.ConnectContextFactory$2:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFully(byte[],int,int) (M)java.io.ObjectInputStream:readFully(byte[],int,int)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)org.osgi.util.tracker.ServiceTracker:open()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:run(org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.equinox.concurrent.future.AbstractFuture:getStatus()
M:org.eclipse.ecf.core.security.ConnectContextFactory$2$1:<init>(org.eclipse.ecf.core.security.ConnectContextFactory$2,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.security.ConnectContextFactory$2:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.Class:getFields()
M:org.eclipse.ecf.core.util.Proxy:hashCode() (M)org.eclipse.ecf.core.util.Proxy:getAddress()
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID) (O)org.eclipse.ecf.core.events.ContainerConnectingEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID,java.lang.Object)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.io.ObjectInputStream:readByte()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:safeRun(org.eclipse.equinox.concurrent.future.ISafeProgressRunner,org.eclipse.equinox.concurrent.future.IProgressRunnable) (I)org.eclipse.equinox.concurrent.future.ISafeProgressRunner:runWithProgress(org.eclipse.equinox.concurrent.future.IProgressRunnable)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (O)java.io.NotSerializableException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String) (I)org.osgi.framework.Bundle:loadClass(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String)
M:org.eclipse.ecf.core.security.ConnectContextFactory$1:getCallbackHandler() (O)org.eclipse.ecf.core.security.ConnectContextFactory$1$1:<init>(org.eclipse.ecf.core.security.ConnectContextFactory$1,java.lang.String,java.lang.Object)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:getClassResolver() (M)org.osgi.util.tracker.ServiceTracker:getService()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (O)java.util.ArrayList:<init>(int)
M:org.eclipse.ecf.core.util.Proxy:hasCredentials() (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.lang.Iterable:iterator()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.security.ObjectCallback:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (M)java.lang.Class:getDeclaredMethod(java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.Proxy$Type:fromString(java.lang.String) (M)java.lang.String:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.Proxy:toString() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerDisposeEvent:toString() (O)java.lang.StringBuffer:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream) (O)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (O)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class)
M:org.eclipse.ecf.core.security.PassphraseCallback:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeLong(long) (M)java.io.ObjectOutputStream:writeLong(long)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.Exception:getMessage()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.util.TreeSet:add(java.lang.Object)
M:org.eclipse.ecf.core.util.ContainerFactoryTracker:<init>(org.osgi.framework.BundleContext) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,java.lang.String,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Float:floatValue()
M:org.eclipse.ecf.core.util.Proxy:equals(java.lang.Object) (M)org.eclipse.ecf.core.util.ProxyAddress:equals(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readInt() (M)java.io.ObjectInputStream:readInt()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)java.io.ObjectOutputStream:writeUTF(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil$MethodComparator:<init>(java.lang.Class[]) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.io.IOException:setStackTrace(java.lang.StackTraceElement[])
M:org.eclipse.ecf.core.util.AdapterContainerFilter:<init>(java.lang.Class) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream,boolean) (O)org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream,boolean,org.osgi.service.log.LogService)
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)java.lang.StringBuffer:toString()
M:org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readLine() (M)java.io.ObjectInputStream:readLine()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (I)org.eclipse.ecf.core.util.IClassResolver:resolveClass(java.io.ObjectStreamClass)
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (O)java.io.NotSerializableException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (I)java.util.List:add(java.lang.Object)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.lang.reflect.Method:getParameterTypes()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (M)java.io.ObjectStreamClass:getName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Class:isPrimitive()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:get(java.lang.Object)
M:org.eclipse.ecf.core.util.Proxy$Type:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.lang.String) (O)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Collection:iterator()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride()
M:org.eclipse.ecf.core.util.ContainerFactoryTracker:<init>(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.security.ConnectContextFactory$2$1:handle(org.eclipse.ecf.core.security.Callback[]) (M)org.eclipse.ecf.core.security.PasswordCallback:setPassword(java.lang.String)
M:org.eclipse.ecf.core.util.Proxy:hashCode() (M)java.lang.Object:hashCode()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:getModifiers()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String) (I)org.osgi.framework.BundleContext:createFilter(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeSerializable(java.lang.Object,java.lang.Class)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeBytes(java.lang.String) (M)java.io.ObjectOutputStream:writeBytes(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.reflect.Constructor:newInstance(java.lang.Object[])
M:org.eclipse.ecf.core.security.NameCallback:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (S)java.lang.reflect.Array:get(java.lang.Object,int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (O)java.util.TreeSet:<init>(java.util.Comparator)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readShort() (M)java.io.ObjectInputStream:readShort()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Enum:name()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (M)java.util.HashMap:get(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:createInstance(java.lang.Class) (M)java.lang.Class:newInstance()
M:org.eclipse.ecf.core.jobs.JobsExecutor:createFuture(org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.equinox.concurrent.future.SingleOperationFuture:<init>(org.eclipse.core.runtime.IProgressMonitor)
M:org.eclipse.ecf.core.util.Proxy:<clinit>() (O)org.eclipse.ecf.core.util.Proxy:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.reflect.Field:setAccessible(boolean)
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)java.lang.StringBuffer:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:createJobName(java.lang.String,int,org.eclipse.equinox.concurrent.future.IProgressRunnable) (M)java.lang.StringBuilder:append(int)
M:org.eclipse.ecf.core.util.BundleClassResolver:<init>(org.osgi.framework.Bundle) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.core.jobs.JobsExecutor:createJobName(java.lang.String,int,org.eclipse.equinox.concurrent.future.IProgressRunnable)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDouble() (M)java.io.ObjectInputStream:readDouble()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolveClass(java.io.ObjectStreamClass) (O)java.lang.ClassNotFoundException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (I)org.osgi.framework.BundleContext:getBundle()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Double:valueOf(double)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (S)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readExternalizable() (M)java.io.ObjectInputStream:readObject()
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (I)org.osgi.framework.Bundle:loadClass(java.lang.String)
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (M)org.eclipse.ecf.core.jobs.JobsExecutor:configureJobForExecution(org.eclipse.core.runtime.jobs.Job)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.Exception:getMessage()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String) (O)java.lang.StringBuilder:<init>(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerDisconnectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerDisconnectedEvent:getLocalContainerID()
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (O)org.eclipse.ecf.core.jobs.JobsExecutor$1:<init>(org.eclipse.ecf.core.jobs.JobsExecutor,java.lang.String,org.eclipse.equinox.concurrent.future.AbstractFuture,org.eclipse.equinox.concurrent.future.IProgressRunnable)
M:org.eclipse.ecf.core.events.ContainerEjectedEvent:toString() (M)org.eclipse.ecf.core.events.ContainerEjectedEvent:getTargetID()
M:org.eclipse.ecf.core.jobs.JobsExecutor:createJobName(java.lang.String,int,org.eclipse.equinox.concurrent.future.IProgressRunnable) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (M)org.eclipse.ecf.core.util.BundleClassResolver:verifyClass(java.io.ObjectStreamClass)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Long:valueOf(long)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.util.Dictionary:size()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.reflect.Field:set(java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (O)java.io.IOException:<init>(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerConnectedEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)org.eclipse.ecf.core.events.ContainerConnectingEvent:getLocalContainerID()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:reset() (M)java.io.ObjectOutputStream:reset()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (M)java.util.TreeSet:first()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readBoolean() (M)java.io.ObjectInputStream:readBoolean()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (I)java.util.Collection:add(java.lang.Object)
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:<init>(org.eclipse.ecf.core.jobs.JobsExecutor,java.lang.String,org.eclipse.equinox.concurrent.future.AbstractFuture,org.eclipse.equinox.concurrent.future.IProgressRunnable) (O)org.eclipse.core.runtime.jobs.Job:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.Class:getSuperclass()
M:org.eclipse.ecf.core.jobs.JobsExecutor$1:<init>(org.eclipse.ecf.core.jobs.JobsExecutor,java.lang.String,org.eclipse.equinox.concurrent.future.AbstractFuture,org.eclipse.equinox.concurrent.future.IProgressRunnable) (M)org.eclipse.ecf.core.jobs.JobsExecutor$1:setSystem(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.util.Dictionary:get(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isPublic(int)
M:org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String) (O)org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean)
M:org.eclipse.ecf.core.util.Proxy:hashCode() (M)org.eclipse.ecf.core.util.Proxy:getType()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:trace(java.lang.String) (I)org.osgi.service.log.LogService:log(int,java.lang.String)
M:org.eclipse.ecf.core.security.PasswordCallback:<init>(java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (S)java.lang.reflect.Array:getLength(java.lang.Object)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (M)java.lang.Class:getDeclaredMethods()
M:org.eclipse.ecf.core.events.ContainerDisconnectingEvent:toString() (M)java.lang.StringBuffer:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.Map:keySet()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readSerializedObject() (M)java.io.ObjectInputStream:readObject()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:read(byte[],int,int) (M)java.io.ObjectInputStream:read(byte[],int,int)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)java.io.ObjectInputStream:<init>(java.io.InputStream)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:write(byte[]) (M)java.io.ObjectOutputStream:write(byte[])
M:org.eclipse.ecf.core.security.PasswordCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.io.ObjectOutputStream:writeUTF(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:write(byte[],int,int) (M)java.io.ObjectOutputStream:write(byte[],int,int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (M)java.lang.Class:getMethods()
M:org.eclipse.ecf.core.util.ContainerManagerTracker:<init>(org.osgi.framework.BundleContext) (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeExternalizable(java.io.Externalizable,java.lang.Class) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:trace(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:getClassForType(java.lang.String) (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeByte(int) (M)java.io.ObjectOutputStream:writeByte(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:available() (M)java.io.ObjectInputStream:available()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)java.lang.Class:getName()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (I)java.util.List:size()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (O)org.osgi.util.tracker.ServiceTracker:<init>(org.osgi.framework.BundleContext,org.osgi.framework.Filter,org.osgi.util.tracker.ServiceTrackerCustomizer)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeNonSerializable(java.lang.Object,java.lang.Class)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.lang.Short:shortValue()
M:org.eclipse.ecf.core.util.BundleClassResolver:<init>(org.osgi.framework.Bundle) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.jobs.JobsExecutor:<init>(java.lang.String,boolean,org.eclipse.core.runtime.jobs.ISchedulingRule,long) (O)org.eclipse.equinox.concurrent.future.AbstractExecutor:<init>()
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (O)org.eclipse.ecf.core.util.reflection.ClassUtil$MethodComparator:<init>(java.lang.Class[])
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:createClassResolverFilter(java.lang.String) (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Character:valueOf(char)
M:org.eclipse.ecf.core.security.BooleanCallback:<init>(java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.Proxy:<init>() (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readNonSerializedObject() (M)java.io.ObjectInputStream:readUTF()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (M)org.eclipse.ecf.core.util.OSGIObjectInputStream:readSerializedObject()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:<init>(org.osgi.framework.BundleContext,java.lang.String) (O)java.io.ObjectInputStream:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (M)java.lang.Object:toString()
M:org.eclipse.ecf.core.util.Proxy:toString() (M)java.lang.StringBuilder:toString()
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:<init>(org.eclipse.ecf.core.identity.ID,org.eclipse.ecf.core.identity.ID,java.lang.Object) (O)java.lang.Object:<init>()
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (M)java.lang.Class:getSuperclass()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException) (M)java.lang.StringBuilder:append(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:<init>(java.io.OutputStream,boolean,org.osgi.service.log.LogService) (O)java.io.ObjectOutputStream:<init>(java.io.OutputStream)
M:org.eclipse.ecf.core.security.PassphraseCallback:<init>(java.lang.String,java.lang.String) (O)java.lang.IllegalArgumentException:<init>(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readByte() (M)java.io.ObjectInputStream:readByte()
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String) (M)java.lang.StringBuilder:append(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)java.util.Dictionary:keys()
M:org.eclipse.ecf.core.events.ContainerConnectingEvent:toString() (M)org.eclipse.ecf.core.events.ContainerConnectingEvent:getTargetID()
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (M)org.osgi.framework.Version:toString()
