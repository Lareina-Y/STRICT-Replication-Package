M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.internal.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.filetransfer.FileTransferInfo:getMimeType() (S)java.net.URLConnection:getFileNameMap()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.filetransfer.identity.FileIDFactory:createFileID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.filetransfer.IRetrieveFileTransferOptions:<clinit>() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.filetransfer.FileTransferInfo:<init>(java.io.File,java.util.Map,java.lang.String,java.lang.String) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.identity.UuID:<init>(org.eclipse.ecf.core.identity.UuID$UuIDNamespace,java.util.UUID) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:initialize() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.Namespace:initialize(java.lang.String,java.lang.String) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.Namespace:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (S)org.eclipse.ecf.core.util.PlatformHelper:isPlatformAvailable()
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.Namespace:getInitStringFromExternalForm(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[])
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getExtensionRegistry() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.BaseID:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (S)org.eclipse.ecf.core.util.Base64:encode(byte[])
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (S)org.eclipse.ecf.internal.core.identity.Activator:access$0(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$2(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaceByName(java.lang.String) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(java.lang.String)
M:org.eclipse.ecf.core.util.AbstractFactory:getClassesForTypes(java.lang.String[],java.lang.Object[],java.lang.ClassLoader) (S)java.lang.Class:forName(java.lang.String,boolean,java.lang.ClassLoader)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$1:removedService(org.osgi.framework.ServiceReference,java.lang.Object) (S)org.eclipse.ecf.core.identity.IDFactory:removeNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:<clinit>() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int)
M:org.eclipse.ecf.core.identity.IDFactory:addNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:<clinit>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.Base64:decode(java.lang.String) (S)org.eclipse.ecf.core.util.Base64:decodeFromCharArray(byte[])
M:org.eclipse.ecf.core.identity.GUID:getRandom(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.BaseID:namespaceToExternalForm() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.GUID:<init>(org.eclipse.ecf.core.identity.Namespace,java.lang.String,java.lang.String,int) (S)org.eclipse.ecf.core.identity.GUID:getRandom(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String) (S)java.security.SecureRandom:getInstance(java.lang.String)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.util.UUID:randomUUID()
M:org.eclipse.ecf.core.identity.IDFactory:getNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.StringID$StringIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:removeNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:<clinit>() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String) (S)org.eclipse.ecf.core.util.Trace:getTimeString()
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.util.StringUtils:xmlEncode(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaceByName(java.lang.String) (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.identity.URIID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.internal.core.identity.Activator:stop(org.osgi.framework.BundleContext) (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:isPlatformAvailable()
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager() (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.LongID$LongNamespace:createInstance(java.lang.Object[]) (S)java.lang.Long:decode(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:getNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace0(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.StringUtils:xmlDecode(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Base64:decodeFromCharArray(byte[]) (S)org.eclipse.ecf.core.util.Base64:decodeDigit(byte)
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$4:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$2(org.eclipse.ecf.internal.core.identity.Activator)
M:org.eclipse.ecf.internal.core.identity.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String) (S)java.lang.Boolean:valueOf(boolean)
M:org.eclipse.ecf.internal.core.identity.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.core.util.Base64:encode(byte[]) (S)org.eclipse.ecf.core.util.Base64:encodeToCharArray(byte[])
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getStringFromByteArray(byte[])
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.StringUtils:replaceFirst(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.identity.IDFactory:containsNamespace(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.internal.core.identity.Activator:setupNamespaceExtensionPoint() (S)org.eclipse.core.runtime.SafeRunner:run(org.eclipse.core.runtime.ISafeRunnable)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.core.identity.IDFactory:containsNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.IDFactory:createID(org.eclipse.ecf.core.identity.Namespace,java.lang.Object[]) (S)org.eclipse.ecf.core.identity.IDFactory:logAndThrow(java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.core.identity.UuID$UuIDNamespace:createInstance(java.lang.Object[]) (S)java.util.UUID:fromString(java.lang.String)
M:org.eclipse.ecf.core.identity.BaseID:<init>(org.eclipse.ecf.core.identity.Namespace) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.identity.URIID$URIIDNamespace:createRandomUUID() (S)java.util.UUID:randomUUID()
M:org.eclipse.ecf.core.util.StringUtils:replaceAllIgnoreCase(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentsString(java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String)
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:changing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$1:addingService(org.osgi.framework.ServiceReference) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.internal.core.identity.Activator$2$1:registryChanged(org.eclipse.core.runtime.IRegistryChangeEvent) (S)org.eclipse.ecf.internal.core.identity.Activator$2:access$0(org.eclipse.ecf.internal.core.identity.Activator$2)
M:org.eclipse.ecf.core.identity.BaseID:compareTo(java.lang.Object) (S)org.eclipse.core.runtime.Assert:isTrue(boolean,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.BundleStarter:startDependents(org.osgi.framework.BundleContext,java.lang.String[],int) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.StringID:setEmptyNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.core.identity.GUID:initializeRandom(java.lang.String,java.lang.String) (S)java.security.SecureRandom:getInstance(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.identity.IDFactory:getNamespaces() (S)org.eclipse.ecf.core.identity.IDFactory:initialize()
M:org.eclipse.ecf.core.util.StringUtils:replaceAll(java.lang.String,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.SystemLogService:doLog(org.osgi.framework.ServiceReference,int,java.lang.String,java.lang.Throwable) (S)org.eclipse.ecf.core.util.SystemLogService:getLogCode(int)
M:org.eclipse.ecf.internal.core.identity.Activator:addNamespaceExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.core.identity.IDFactory:addNamespace0(org.eclipse.ecf.core.identity.Namespace)
M:org.eclipse.ecf.core.identity.GUID$GUIDNamespace:createInstance(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:exiting(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object[]) (S)org.eclipse.ecf.core.util.Trace:shouldTrace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Object) (S)org.eclipse.ecf.core.util.Trace:getArgumentString(java.lang.Object)
M:org.eclipse.ecf.core.util.AdapterManagerTracker:getAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager()
M:org.eclipse.ecf.core.util.ExtensionRegistryRunnable:logWarning(java.lang.Throwable) (S)org.eclipse.ecf.internal.core.identity.Activator:getDefault()
M:org.eclipse.ecf.core.util.Trace:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String)
M:org.eclipse.ecf.internal.core.identity.Activator$2:runWithRegistry(org.eclipse.core.runtime.IExtensionRegistry) (S)org.eclipse.ecf.internal.core.identity.Activator:access$1(org.eclipse.ecf.internal.core.identity.Activator,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setRequestHeaderValues() (S)java.lang.Integer:getInteger(java.lang.String,int)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:close() (S)java.lang.Thread:currentThread()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:skip(long) (S)java.lang.Math:min(long,long)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:hardClose() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (S)org.eclipse.ecf.provider.filetransfer.retrieve.HttpHelper:getRemoteFileNameFromContentDispositionHeader(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getAdapterManager() (S)org.eclipse.ecf.core.util.PlatformHelper:getPlatformAdapterManager()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFileAttributes:<clinit>() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.Math:round(double)
M:org.eclipse.ecf.provider.filetransfer.util.TimeoutInputStream:syncFill() (S)java.lang.Thread:currentThread()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:parseExcludedPlugins() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)java.lang.String:valueOf(int)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:connect() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setResumeRequestHeaderValues() (S)java.lang.Integer:getInteger(java.lang.String,int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:getResponseCode(java.net.URLConnection) (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupAuthentication() (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:<init>(org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,java.net.Socket,java.net.Socket) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupTimeouts() (S)java.lang.System:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Messages:<clinit>() (S)org.eclipse.osgi.util.NLS:initializeMessages(java.lang.String,java.lang.Class)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getInitFromExternalForm(java.lang.Object[]) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:toString() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setRetrieveFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRetrieveFileTransferFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.Math:round(double)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:entering(java.lang.String,java.lang.String,java.lang.Class,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:createJobName() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:sendBrowseRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:hardClose() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketEvent:toString() (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:setupTimeouts() (S)java.lang.System:setProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (S)java.lang.Class:forName(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getProxyService() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:throwing(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.MultiProtocolFileSystemBrowserAdapter:getBrowseNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:trace(java.lang.String,java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:pluginExcluded(java.lang.String) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addSendExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.PollingInputStream:logError(java.lang.String,java.io.IOException) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:<clinit>() (S)java.lang.System:getProperty(java.lang.String,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupAuthentication() (S)java.net.Authenticator:setDefault(java.net.Authenticator)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.String:valueOf(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getOutgoingNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser$2:getException() (S)org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:access$0(org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:toHumanReadableBytes(double)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:start(org.osgi.framework.BundleContext) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator$DummyURLStreamHandlerService:openConnection(java.net.URL) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.System:currentTimeMillis()
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URI) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getSocksProxy(java.net.URL) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaderValues() (S)org.eclipse.core.runtime.Path:fromPortableString(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRetrieveNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileTransferInfo,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:hardClose() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.events.socket.AbstractSocketWrapper:<init>(java.net.Socket) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer$1:performFileTransfer(org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractUrlConnectionOutgoingFileTransfer:getResponseCode() (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseCode() (S)java.lang.Integer:parseInt(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreamsForResume() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addRetrieveExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)java.lang.Boolean:valueOf(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String) (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:selectProxyFromProxies(java.lang.String,org.eclipse.core.net.proxy.IProxyData[])
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.core.util.Trace:catching(java.lang.String,java.lang.String,java.lang.Class,java.lang.String,java.lang.Throwable)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferNamespace:getSupportedSchemes() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.LocalFileOutgoingFileTransfer:openStreams() (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogMessage(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:log(org.eclipse.core.runtime.IStatus) (S)org.eclipse.ecf.core.util.LogHelper:getLogCode(org.eclipse.core.runtime.IStatus)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:sendRetrieveRequest(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IFileRangeSpecification,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:getResponseHeaders() (S)java.util.Collections:unmodifiableMap(java.util.Map)
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:getRemoteFileName() (S)org.eclipse.core.runtime.Path:fromPortableString(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.lang.String:valueOf(int)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:getPriority(org.eclipse.core.runtime.IConfigurationElement,java.lang.String,java.lang.String) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil$1:close() (S)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:setupTimeouts() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getOutgoingNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:dispose() (S)java.lang.System:getProperties()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setSendFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.ISendFileTransferFactory,int,boolean) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.retrieve.AbstractRetrieveFileTransfer:handleReceivedData(byte[],int,double,org.eclipse.core.runtime.IProgressMonitor) (S)java.lang.System:currentTimeMillis()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:<init>(java.io.File) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:setupProxies() (S)org.eclipse.ecf.provider.filetransfer.util.ProxySetupHelper:getProxy(java.lang.String)
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:setBrowseFileTransferFactory(java.lang.String,java.lang.String,org.eclipse.ecf.filetransfer.service.IRemoteFileSystemBrowserFactory,int,boolean) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.internal.provider.filetransfer.Activator:addBrowseExtensions(org.eclipse.core.runtime.IConfigurationElement[]) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.util.JREProxyHelper:setupProxy(org.eclipse.ecf.core.util.Proxy) (S)java.lang.System:getProperties()
M:org.eclipse.ecf.provider.filetransfer.retrieve.UrlConnectionRetrieveFileTransfer:openStreams() (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:<init>(long,long,org.eclipse.ecf.filetransfer.identity.IFileID) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.identity.FileTransferID:<init>(org.eclipse.ecf.core.identity.Namespace,java.net.URL) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object,java.lang.String)
M:org.eclipse.ecf.provider.filetransfer.retrieve.MultiProtocolRetrieveAdapter:getRetrieveNamespace() (S)org.eclipse.ecf.core.identity.IDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.AbstractFileSystemBrowser:<init>(org.eclipse.ecf.filetransfer.identity.IFileID,org.eclipse.ecf.filetransfer.IRemoteFileSystemListener,java.net.URL,org.eclipse.ecf.core.security.IConnectContext,org.eclipse.ecf.core.util.Proxy) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.outgoing.MultiProtocolOutgoingAdapter:sendOutgoingRequest(org.eclipse.ecf.filetransfer.identity.IFileID,java.io.File,org.eclipse.ecf.filetransfer.IFileTransferListener,java.util.Map) (S)org.eclipse.osgi.util.NLS:bind(java.lang.String,java.lang.Object)
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFileAttributes:<clinit>() (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.LocalRemoteFile:getID() (S)org.eclipse.ecf.filetransfer.identity.FileIDFactory:getDefault()
M:org.eclipse.ecf.provider.filetransfer.browse.URLRemoteFile:getAdapter(java.lang.Class) (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:createSocket(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEventSource,org.eclipse.ecf.filetransfer.events.socketfactory.INonconnectedSocketFactory,java.net.InetSocketAddress,java.net.InetSocketAddress,int) (S)org.eclipse.ecf.provider.filetransfer.events.socket.SocketEventCreateUtil:fireEvent(org.eclipse.ecf.filetransfer.events.socket.ISocketListener,org.eclipse.ecf.filetransfer.events.socket.ISocketEvent)
M:org.eclipse.ecf.provider.filetransfer.browse.URLFileSystemBrowser:runRequest() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:getDefault()
M:org.eclipse.ecf.provider.filetransfer.outgoing.AbstractOutgoingFileTransfer:setupProxies() (S)org.eclipse.ecf.internal.provider.filetransfer.Activator:logNoProxyWarning(java.lang.Throwable)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLServerSocketFactory() (S)javax.net.ssl.SSLServerSocketFactory:getDefault()
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLContext(java.lang.String) (S)org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFTrustManager:getTrustEngines() (S)java.lang.System:arraycopy(java.lang.Object,int,java.lang.Object,int,int)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:<init>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLServerSocketFactory:getSSLContext(java.lang.String) (S)org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String)
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:getSSLSocketFactory() (S)javax.net.ssl.SSLSocketFactory:getDefault()
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (S)javax.net.ssl.SSLContext:getInstance(java.lang.String)
M:org.eclipse.ecf.internal.ssl.SSLContextHelper:getSSLContext(java.lang.String) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.internal.ssl.ECFSSLSocketFactory:<init>() (S)java.lang.System:getProperty(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.reflect.Array:set(java.lang.Object,int,java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Boolean:valueOf(boolean)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Byte:valueOf(byte)
M:org.eclipse.ecf.core.util.BundleClassResolver:resolveClass(java.io.ObjectStreamClass) (S)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:resolvePrimitiveClass(java.io.ObjectStreamClass,java.lang.ClassNotFoundException)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isPublic(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Double:valueOf(double)
M:org.eclipse.ecf.core.util.ProxyAddress:hashCode() (S)java.lang.Math:abs(int)
M:org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream) (S)org.eclipse.ecf.core.util.ClassResolverObjectInputStream:create(org.osgi.framework.BundleContext,java.io.InputStream,java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (S)java.lang.reflect.Array:getLength(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Character:valueOf(char)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil$MethodComparator:compare(java.lang.Object,java.lang.Object) (S)java.util.Arrays:equals(java.lang.Object[],java.lang.Object[])
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readFields(java.lang.Class,java.lang.Object) (S)java.lang.reflect.Modifier:isPublic(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Float:valueOf(float)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Long:valueOf(long)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Short:valueOf(short)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeFields(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:isAssignableFrom(java.lang.Class,java.lang.Class)
M:org.eclipse.ecf.core.jobs.JobsExecutor:execute(org.eclipse.equinox.concurrent.future.IProgressRunnable,org.eclipse.core.runtime.IProgressMonitor) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeObjectOverride(java.lang.Object) (S)java.lang.reflect.Array:get(java.lang.Object,int)
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[]) (S)java.util.Arrays:asList(java.lang.Object[])
M:org.eclipse.ecf.core.util.reflection.ClassUtil:getDeclaredMethod(java.lang.Class,java.lang.String,java.lang.Class[]) (S)org.eclipse.ecf.core.util.reflection.ClassUtil:getMethod(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:loadClass(java.lang.String) (S)java.lang.Class:forName(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readDTO() (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Integer:valueOf(int)
M:org.eclipse.ecf.core.util.BundleClassResolver:<init>(org.osgi.framework.Bundle) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)org.osgi.framework.Version:parseVersion(java.lang.String)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isStatic(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.reflect.Array:newInstance(java.lang.Class,int)
M:org.eclipse.ecf.core.util.OSGIObjectOutputStream:writeDTO(java.lang.Object,java.lang.Class) (S)java.lang.reflect.Modifier:isTransient(int)
M:org.eclipse.ecf.core.util.OSGIObjectInputStream:readObjectOverride() (S)java.lang.Enum:valueOf(java.lang.Class,java.lang.String)
M:org.eclipse.ecf.core.util.AdapterContainerFilter:<init>(java.lang.Class) (S)org.eclipse.core.runtime.Assert:isNotNull(java.lang.Object)
