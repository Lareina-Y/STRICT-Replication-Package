M:org.apache.commons.math3.geometry.euclidean.twod.Segment:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:min(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.VectorFormat:<init>() (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:getAngle() (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:acos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AbstractConvexHullGenerator2D:generate(java.util.Collection) (S)org.apache.commons.math3.util.MathUtils:checkNotNull(java.lang.Object)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseFixedstring(java.lang.String,java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:isParallelTo(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance() (S)java.util.Locale:getDefault()
M:org.apache.commons.math3.geometry.VectorFormat:getAvailableLocales() (S)java.text.NumberFormat:getAvailableLocales()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:crossProduct(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain$1:compare(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:signum(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:max(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:findHullVertices(java.util.Collection) (S)java.util.Collections:sort(java.util.List,java.util.Comparator)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance1(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm() (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:readResolve() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:access$000()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNorm1() (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$100(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getSubSpace() (S)org.apache.commons.math3.geometry.euclidean.oned.Euclidean1D:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$000(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$1:<clinit>() (S)org.apache.commons.math3.geometry.partitioning.Side:values()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:hashCode() (S)org.apache.commons.math3.util.MathUtils:hash(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance(java.util.Locale) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat(java.util.Locale)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:hypot(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.SubHyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane,org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$300(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (S)org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:buildQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[])
M:org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getInstance() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D$LazyHolder:access$000()
M:org.apache.commons.math3.geometry.euclidean.twod.hull.MonotoneChain:updateHull(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:distance(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseNumber(java.lang.String,java.text.NumberFormat,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.NestedLoops:<init>(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[],double) (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:<init>(org.apache.commons.math3.geometry.euclidean.twod.Segment) (S)org.apache.commons.math3.geometry.euclidean.twod.SubLine:buildIntervalSet(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:setAngle(double) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isNaN() (S)java.lang.Double:isNaN(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:split(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.VectorFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.ConvexHull2D:isConvex(org.apache.commons.math3.geometry.euclidean.twod.Vector2D[]) (S)org.apache.commons.math3.util.FastMath:signum(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.geometry.euclidean.twod.Line:access$200(org.apache.commons.math3.geometry.euclidean.twod.Line)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>(java.lang.String,java.lang.String,java.lang.String) (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distanceInf(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:toString() (S)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getSpace() (S)org.apache.commons.math3.geometry.euclidean.twod.Euclidean2D:getInstance()
M:org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet$SegmentsBuilder:addContribution(org.apache.commons.math3.geometry.partitioning.SubHyperplane,boolean) (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:isInfinite() (S)java.lang.Double:isInfinite(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:<init>() (S)org.apache.commons.math3.util.CompositeFormat:getDefaultNumberFormat()
M:org.apache.commons.math3.geometry.VectorFormat:parseCoordinates(int,java.lang.String,java.text.ParsePosition) (S)org.apache.commons.math3.util.CompositeFormat:parseAndIgnoreWhitespace(java.lang.String,java.text.ParsePosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:dotProduct(org.apache.commons.math3.geometry.Vector) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.VectorFormat:format(java.lang.StringBuffer,java.text.FieldPosition,double[]) (S)org.apache.commons.math3.util.CompositeFormat:formatDouble(double,java.text.NumberFormat,java.lang.StringBuffer,java.text.FieldPosition)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,double) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNormInf() (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:asin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance() (S)org.apache.commons.math3.geometry.euclidean.twod.Vector2DFormat:getInstance(java.util.Locale)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:cos(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:<init>(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.MathUtils:normalizeAngle(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:apply(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:atan2(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:distance(org.apache.commons.math3.geometry.Point) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:angle(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.MathArrays:linearCombination(double,double,double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:reducePoints(java.util.Collection) (S)org.apache.commons.math3.geometry.euclidean.twod.hull.AklToussaintHeuristic:insideQuadrilateral(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,java.util.List)
M:org.apache.commons.math3.geometry.euclidean.twod.Vector2D:getNormInf() (S)org.apache.commons.math3.util.FastMath:max(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.DiskGenerator:ballOnSupport(java.util.List) (S)org.apache.commons.math3.util.FastMath:sqrt(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:intersection(org.apache.commons.math3.geometry.euclidean.twod.Line) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.SubLine:side(org.apache.commons.math3.geometry.partitioning.Hyperplane) (S)org.apache.commons.math3.util.FastMath:sin(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:reset(org.apache.commons.math3.geometry.euclidean.twod.Vector2D,org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:atan2(double,double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line:contains(org.apache.commons.math3.geometry.euclidean.twod.Vector2D) (S)org.apache.commons.math3.util.FastMath:abs(double)
M:org.apache.commons.math3.geometry.euclidean.twod.Line$LineTransform:<init>(java.awt.geom.AffineTransform) (S)org.apache.commons.math3.util.FastMath:abs(double)
