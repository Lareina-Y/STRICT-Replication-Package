Object eval Call Stack CallStack callstack Interpreter interpreter Eval Error EvalError has For Init hasForInit for Init forInit Simple Node SimpleNode jjt Get Child jjtGetChild has Expression hasExpression expression Simple Node SimpleNode jjt Get Child jjtGetChild has For Update hasForUpdate for Update forUpdate Simple Node SimpleNode jjt Get Child jjtGetChild jjt Get Num Children jjtGetNumChildren statement Simple Node SimpleNode jjt Get Child jjtGetChild Name Space NameSpace enclosing Name Space enclosingNameSpace callstack top Block Name Space BlockNameSpace for Name Space forNameSpace Block Name Space BlockNameSpace enclosing Name Space enclosingNameSpace Note interesting swap push primary mode operation acts enclosing namespace preserved call body block eval namespace override create subordinate Block Name Space BlockNameSpace child for Name Space forNameSpace Variable propogation works chain block child cleans iteration correct Java behavior forscope bsh for Name Space forNameSpace top stack Note exit point method swap namespace callstack swap for Name Space forNameSpace init has For Init hasForInit for Init forInit eval callstack interpreter Object return Control returnControl Primitive has Expression hasExpression cond BSHIf Statement BSHIfStatement evaluate Condition evaluateCondition expression callstack interpreter cond eats multi level breakout empty statement statement invoke special override block Object ret statement eval callstack interpreter ret Return Control ReturnControl Return Control ReturnControl ret kind return Control returnControl ret breakout breakout breakout has For Update hasForUpdate for Update forUpdate eval callstack interpreter callstack swap enclosing Name Space enclosingNameSpace return Control returnControl